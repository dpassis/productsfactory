/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Menu.java
 *
 * Created on Feb 6, 2013, 1:51:30 PM
 */
package productsfactory.view;

import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.SQLException;
import java.text.DateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import productsfactory.control.TarefasControl;
import productsfactory.model.Usuario;
import productsfactory.useful.Conexao;
import productsfactory.useful.Relogio;

/**
 * Menu Principa do Sistema
 * 
 * @author Daniel
 */
public class Menu extends javax.swing.JFrame {

    private static Usuario user = null;

    /** Creates new form Menu */
    public Menu(Usuario usuario) throws SQLException {
        initComponents();
        user = usuario;
        this.inicializa();

    }

    public Menu() throws SQLException {
        initComponents();

        this.inicializa();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMenu = new interfacegrafica.dpa.panels.PanelDPA();
        lblLogoMenu = new interfacegrafica.dpa.labels.LabelDPA();
        lblHoje = new interfacegrafica.dpa.labels.LabelDPA();
        lblUsuario = new interfacegrafica.dpa.labels.LabelDPA();
        lblTarefas = new interfacegrafica.dpa.labels.LabelDPA();
        lblRelogio = new interfacegrafica.dpa.labels.LabelDPA();
        jMenuBarMenuPrincipal = new javax.swing.JMenuBar();
        jMenuCadastros = new javax.swing.JMenu();
        jmiUsuarios = new javax.swing.JMenuItem();
        jMenuBSR = new javax.swing.JMenu();
        jMenuItemState = new javax.swing.JMenuItem();
        jMenuItemPerfil = new javax.swing.JMenuItem();
        jMenuConsultas = new javax.swing.JMenu();
        jmiLogEntradaSaidaUsuario = new javax.swing.JMenuItem();
        jmiLogAcoesUsuario = new javax.swing.JMenuItem();
        jMenuUsuario = new javax.swing.JMenu();
        jmiAlterarSenha = new javax.swing.JMenuItem();
        jmiTrocaUsuario = new javax.swing.JMenuItem();
        jmiEnviaMail = new javax.swing.JMenuItem();
        jmiSair = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jmiAjuda = new javax.swing.JMenuItem();
        jmiAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Menu");

        lblLogoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/logo1 - Copy_1.jpg"))); // NOI18N
        lblLogoMenu.setText("");

        lblHoje.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hoje é", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        lblHoje.setForeground(new Color(185, 211, 238));
        lblHoje.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHoje.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/calendar.png"))); // NOI18N
        lblHoje.setText("   ");
        lblHoje.setToolTipText("Dia atual");

        lblUsuario.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Conectado ao Sistema", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        lblUsuario.setForeground(new Color(185, 211, 238));
        lblUsuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/usuario_menu_item.png"))); // NOI18N
        lblUsuario.setText("   ");
        lblUsuario.setToolTipText("Usuário conectado ao Sistema");

        lblTarefas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tarefas do Dia", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        lblTarefas.setForeground(new Color(185, 211, 238));
        lblTarefas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTarefas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/tarefa_menu_item.png"))); // NOI18N
        lblTarefas.setText("   ");
        lblTarefas.setToolTipText("Clique aqui para controlar suas tarefas");
        lblTarefas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblTarefasMouseClicked(evt);
            }
        });

        lblRelogio.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Relógio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        lblRelogio.setForeground(new Color(185, 211, 238));
        lblRelogio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRelogio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/clock.png"))); // NOI18N
        lblRelogio.setText("   ");
        lblRelogio.setToolTipText("Hora Atual");

        javax.swing.GroupLayout pnlMenuLayout = new javax.swing.GroupLayout(pnlMenu);
        pnlMenu.setLayout(pnlMenuLayout);
        pnlMenuLayout.setHorizontalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlMenuLayout.createSequentialGroup()
                            .addGap(373, 373, 373)
                            .addComponent(lblLogoMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMenuLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblHoje, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTarefas, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                        .addGap(644, 644, 644)))
                .addGap(207, 207, 207)
                .addComponent(lblRelogio, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        pnlMenuLayout.setVerticalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMenuLayout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(lblLogoMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(lblTarefas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMenuLayout.createSequentialGroup()
                        .addContainerGap(526, Short.MAX_VALUE)
                        .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHoje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRelogio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        getContentPane().add(pnlMenu, java.awt.BorderLayout.CENTER);

        jMenuCadastros.setText("Cadastros");
        jMenuCadastros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCadastrosActionPerformed(evt);
            }
        });

        jmiUsuarios.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        jmiUsuarios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/usuario_menu_item.png"))); // NOI18N
        jmiUsuarios.setText("Usuários");
        jmiUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiUsuariosActionPerformed(evt);
            }
        });
        jMenuCadastros.add(jmiUsuarios);

        jMenuBarMenuPrincipal.add(jMenuCadastros);

        jMenuBSR.setText("BSR's");

        jMenuItemState.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/script_menu_item.png"))); // NOI18N
        jMenuItemState.setText("Generate State");
        jMenuItemState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemStateActionPerformed(evt);
            }
        });
        jMenuBSR.add(jMenuItemState);

        jMenuItemPerfil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/script_menu_item.png"))); // NOI18N
        jMenuItemPerfil.setText("Generate Perfil");
        jMenuItemPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPerfilActionPerformed(evt);
            }
        });
        jMenuBSR.add(jMenuItemPerfil);

        jMenuBarMenuPrincipal.add(jMenuBSR);

        jMenuConsultas.setText("Consultas");

        jmiLogEntradaSaidaUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/log_menu_item.png"))); // NOI18N
        jmiLogEntradaSaidaUsuario.setText("Log Acesso Usuário");
        jmiLogEntradaSaidaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiLogEntradaSaidaUsuarioActionPerformed(evt);
            }
        });
        jMenuConsultas.add(jmiLogEntradaSaidaUsuario);

        jmiLogAcoesUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/help.png"))); // NOI18N
        jmiLogAcoesUsuario.setText("Log Ações Usuário");
        jmiLogAcoesUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiLogAcoesUsuarioActionPerformed(evt);
            }
        });
        jMenuConsultas.add(jmiLogAcoesUsuario);

        jMenuBarMenuPrincipal.add(jMenuConsultas);

        jMenuUsuario.setText("Usuário");

        jmiAlterarSenha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/alterasenha.png"))); // NOI18N
        jmiAlterarSenha.setText("Alterar Senha");
        jmiAlterarSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAlterarSenhaActionPerformed(evt);
            }
        });
        jMenuUsuario.add(jmiAlterarSenha);

        jmiTrocaUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/cofebreak.png"))); // NOI18N
        jmiTrocaUsuario.setText("Trocar de Usuário");
        jmiTrocaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiTrocaUsuarioActionPerformed(evt);
            }
        });
        jMenuUsuario.add(jmiTrocaUsuario);

        jmiEnviaMail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/email_menu_item.png"))); // NOI18N
        jmiEnviaMail.setText("Enviar Email");
        jmiEnviaMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEnviaMailActionPerformed(evt);
            }
        });
        jMenuUsuario.add(jmiEnviaMail);

        jmiSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/logout.png"))); // NOI18N
        jmiSair.setText("Sair");
        jmiSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSairActionPerformed(evt);
            }
        });
        jMenuUsuario.add(jmiSair);

        jMenuBarMenuPrincipal.add(jMenuUsuario);

        jMenuHelp.setText("Help (?)");

        jmiAjuda.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jmiAjuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/about.png"))); // NOI18N
        jmiAjuda.setText("Apoio ao Usuário");
        jmiAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAjudaActionPerformed(evt);
            }
        });
        jMenuHelp.add(jmiAjuda);

        jmiAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jmiAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/about.png"))); // NOI18N
        jmiAbout.setText("About");
        jmiAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jmiAbout);

        jMenuBarMenuPrincipal.add(jMenuHelp);

        setJMenuBar(jMenuBarMenuPrincipal);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jmiUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiUsuariosActionPerformed
    try {
        // TODO add your handling code here:
        UsuariosView usuariosView = UsuariosView.getDialogUsuarios(this, user);
        usuariosView.setVisible(true);
    } catch (SQLException ex) {
        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_jmiUsuariosActionPerformed

private void jmiSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSairActionPerformed
// TODO add your handling code here:
    UIManager.put("OptionPane.yesButtonText", "Sim");
    UIManager.put("OptionPane.noButtonText", "Não");
    int option = JOptionPane.showConfirmDialog(rootPane, "Tem certeza que deseja encerrar o Sistema?", "Pergunta Sistema", JOptionPane.YES_NO_OPTION, 3);

    if (option == 0) {
        Conexao.getInstance().destroy();
        System.exit(0);
    }
    if (option == 1) {
        JOptionPane.showMessageDialog(null, "Saída do Sistema cancelada pelo usuário", "Aviso Sistema", 1);

    }
}//GEN-LAST:event_jmiSairActionPerformed

private void jmiTrocaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiTrocaUsuarioActionPerformed
// TODO add your handling code here:
    int option = JOptionPane.showConfirmDialog(rootPane, "Tem certeza que deseja trocar de usuário?", "Usuários Sistema", JOptionPane.YES_NO_OPTION, 3);
    if (option == 0) {

        try {
//            PontoFuncionario pontoFuncionario = new PontoFuncionario();
//
//            pontoFuncionario.setUsuario(user);
//            pontoFuncionario.setDataCompleta(ControleUsuario.getDataCompleta());
//            pontoFuncionario.setDataPonto(ControleUsuario.getData());
//            pontoFuncionario.setHoraPonto(ControleUsuario.getHora());
//            pontoFuncionario.setTipoPonto("Troca de Usuário");
//            ControleUsuario.inserePontoFuncionario(pontoFuncionario);

            Conexao.getInstance().destroy();
            Menu.this.dispose();



            Login login = new Login();
            login.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);


        }

    }
    if (option == 1) {
        JOptionPane.showMessageDialog(null, "Troca de usuário cancelada", "Usuários Sistema", 1);
    }
}//GEN-LAST:event_jmiTrocaUsuarioActionPerformed

private void jMenuCadastrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCadastrosActionPerformed
}//GEN-LAST:event_jMenuCadastrosActionPerformed

private void jmiEnviaMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEnviaMailActionPerformed
// TODO add your handling code here:
    EnviaMail enviaMail = EnviaMail.getDialogEnviaMailFrame(this, "", user);
    enviaMail.setVisible(true);

}//GEN-LAST:event_jmiEnviaMailActionPerformed

private void jmiLogEntradaSaidaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiLogEntradaSaidaUsuarioActionPerformed
//    try {
//        // TODO add your handling code here:
//        LogPontoFuncionario log = LogPontoFuncionario.getDialogLogPonto(this, user);
//        log.setVisible(true);
//    } catch (SQLException ex) {
//        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
//    }
}//GEN-LAST:event_jmiLogEntradaSaidaUsuarioActionPerformed

private void jmiLogAcoesUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiLogAcoesUsuarioActionPerformed
    try {
        // TODO add your handling code here:
        LogAcoesUsuario log = LogAcoesUsuario.getDialogLogAcoes(this, user);
        log.setVisible(true);
    } catch (SQLException ex) {
        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_jmiLogAcoesUsuarioActionPerformed

private void jmiAlterarSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAlterarSenhaActionPerformed
// TODO add your handling code here:
    AlteraSenhaView alteraSenhaView = AlteraSenhaView.getDialogAlteraSenha(this, user);
    alteraSenhaView.setVisible(true);
}//GEN-LAST:event_jmiAlterarSenhaActionPerformed

private void jmiAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAboutActionPerformed
    About about = About.getDialogAbout();
    about.setVisible(true);
}//GEN-LAST:event_jmiAboutActionPerformed

private void jmiAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAjudaActionPerformed
// TODO add your handling code here:
    try {
        URL arquivoURL = getClass().getResource("/sistemaoficinamusica/files/about.chm");
       

        
         File f = new File(arquivoURL.toURI());
           
          java.awt.Desktop.getDesktop().open(f);
        } catch (URISyntaxException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_jmiAjudaActionPerformed

    private void lblTarefasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTarefasMouseClicked
        // TODO add your handling code here:
        try {
            TarefasView tarefasView = TarefasView.getDialogTarefas(this, user);
            tarefasView.setVisible(true);
            this.tarefasDia();
        } catch (SQLException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_lblTarefasMouseClicked

    private void jMenuItemStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemStateActionPerformed
        // TODO add your handling code here:
        StateView stateView  = new StateView(this);
        stateView.setVisible(true);
    }//GEN-LAST:event_jMenuItemStateActionPerformed

    private void jMenuItemPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPerfilActionPerformed
        // TODO add your handling code here:
        PerfilView perfilView = new PerfilView(this);
        perfilView.setVisible(true);
    }//GEN-LAST:event_jMenuItemPerfilActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenuBSR;
    private javax.swing.JMenuBar jMenuBarMenuPrincipal;
    private javax.swing.JMenu jMenuCadastros;
    private javax.swing.JMenu jMenuConsultas;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemPerfil;
    private javax.swing.JMenuItem jMenuItemState;
    private javax.swing.JMenu jMenuUsuario;
    private javax.swing.JMenuItem jmiAbout;
    private javax.swing.JMenuItem jmiAjuda;
    private javax.swing.JMenuItem jmiAlterarSenha;
    private javax.swing.JMenuItem jmiEnviaMail;
    private javax.swing.JMenuItem jmiLogAcoesUsuario;
    private javax.swing.JMenuItem jmiLogEntradaSaidaUsuario;
    private javax.swing.JMenuItem jmiSair;
    private javax.swing.JMenuItem jmiTrocaUsuario;
    private javax.swing.JMenuItem jmiUsuarios;
    private interfacegrafica.dpa.labels.LabelDPA lblHoje;
    private interfacegrafica.dpa.labels.LabelDPA lblLogoMenu;
    private interfacegrafica.dpa.labels.LabelDPA lblRelogio;
    private interfacegrafica.dpa.labels.LabelDPA lblTarefas;
    private interfacegrafica.dpa.labels.LabelDPA lblUsuario;
    private interfacegrafica.dpa.panels.PanelDPA pnlMenu;
    // End of variables declaration//GEN-END:variables

    /**
     * WindowListener
     */
    private void addWindowListener() {

        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent evt) {
                UIManager.put("OptionPane.yesButtonText", "Sim");
                UIManager.put("OptionPane.noButtonText", "Não");
                int option = JOptionPane.showConfirmDialog(rootPane, "Tem certeza que deseja encerrar o Sistema?", "Pergunta Sistema", JOptionPane.YES_NO_OPTION, 3);

                if (option == 0) {

//                    PontoFuncionario pontoFuncionario = new PontoFuncionario();
//
//                    pontoFuncionario.setUsuario(user);
//                    pontoFuncionario.setDataCompleta(ControleUsuario.getDataCompleta());
//                    pontoFuncionario.setDataPonto(ControleUsuario.getData());
//                    pontoFuncionario.setHoraPonto(ControleUsuario.getHora());
//                    pontoFuncionario.setTipoPonto("Saída do Sistema");
                    if(!user.getCategoriaUsuario().equals("manut")){
                        //ControleUsuario.inserePontoFuncionario(pontoFuncionario);
                        Conexao.getInstance().destroy();
                    }
                    user = null;
                    System.gc();
                    System.exit(0);

                }
                if (option == 1) {
                    JOptionPane.showMessageDialog(rootPane, "Saída do Sistema cancelada pelo usuário", "Aviso Sistema", 1);

                }
            }
        });
    }

    /**
     * Faz a consulta por tarefas do usuário do
     * dia corrente
     * 
     * @throws SQLException 
     */
    public void tarefasDia() throws SQLException {

        Integer contTarefas = TarefasControl.listaTarefasDia(new Date(), new Date(), user);

        if (contTarefas > 0) {
            lblTarefas.setForeground(new Color(255, 114, 86));
            this.lblTarefas.setText("Você tem " + contTarefas + " tarefa(s) para hoje.");

            System.out.println("Você tem " + contTarefas + " tarefa(s) para hoje.");

        } else {
            lblTarefas.setForeground(new Color(144, 238, 144));

            this.lblTarefas.setText("Você tem " + contTarefas + " tarefa(s) para hoje.");
            System.out.println("Você tem " + contTarefas + " tarefa(s) para hoje.");
        }
    }

    /**
     * Carrega os itens de Menu de acordo com 
     * o tipo do usuário
     */
    private void desenhaMenu() {

        Properties config = new Properties();
        try {

            if (user.getCategoriaUsuario().equals("userSystem")) {
                InputStream configuracao = getClass().getResourceAsStream("/productsfactory/config/usersystem.properties");
                config.load(configuracao);

            } else if (user.getCategoriaUsuario().equals("admSystem")) {

                InputStream configuracao = getClass().getResourceAsStream("/productsfactory/config/admsystem.properties");
                config.load(configuracao);
                
            } else if (user.getCategoriaUsuario().equals("manut")) {

                InputStream configuracao = getClass().getResourceAsStream("/productsfactory/config/manut.properties");
                config.load(configuracao);
            } else if (user.getCategoriaUsuario().equals("root")) {

                InputStream configuracao = getClass().getResourceAsStream("/productsfactory/config/root.properties");
                config.load(configuracao);
            }else if (user.getCategoriaUsuario().equals("professor")) {

                InputStream configuracao = getClass().getResourceAsStream("/productsfactory/config/professor.properties");
                config.load(configuracao);
            }


            /************Menu Cadastros*******************************/
            jMenuCadastros.setVisible(Boolean.parseBoolean(config.getProperty("jMenuCadastros")));
           
            jmiUsuarios.setVisible(Boolean.parseBoolean(config.getProperty("jmiUsuarios")));
            

            /***SubRelatorios***/
            jMenuConsultas.setVisible(Boolean.parseBoolean(config.getProperty("jMenuConsultas")));
            /*****SubConsultas****/
            jmiLogEntradaSaidaUsuario.setVisible(Boolean.parseBoolean(config.getProperty("jmiLogEntradaSaidaUsuario")));
            jmiLogAcoesUsuario.setVisible(Boolean.parseBoolean(config.getProperty("jmiLogAcoesUsuario")));
            

            /****Menu Usuario****/
            jMenuUsuario.setVisible(Boolean.parseBoolean(config.getProperty("jMenuUsuario")));
            /***SubUsuarios***/
            jmiAlterarSenha.setVisible(Boolean.parseBoolean(config.getProperty("jmiAlterarSenha")));
            jmiTrocaUsuario.setVisible(Boolean.parseBoolean(config.getProperty("jmiTrocaUsuario")));
            jmiEnviaMail.setVisible(Boolean.parseBoolean(config.getProperty("jmiEnviaMail")));
            jmiSair.setVisible(Boolean.parseBoolean(config.getProperty("jmiSair")));


            /****Menu BSRS's***/
            
            jMenuBSR.setVisible(Boolean.parseBoolean(config.getProperty("jMenuBSR")));
       
            /****Menu Help****/
            jMenuHelp.setVisible(Boolean.parseBoolean(config.getProperty("jMenuHelp")));
            /****SubHelp******/
            jmiAbout.setVisible(Boolean.parseBoolean(config.getProperty("jmiAbout")));
            jmiAjuda.setVisible(Boolean.parseBoolean(config.getProperty("jmiAjuda")));

            /*****Tarefas*****/
            lblTarefas.setVisible(Boolean.parseBoolean(config.getProperty("lblTarefas")));



        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Exibe a hora atual
     */
    private void mostrarHora() {
        Relogio relogio = new Relogio(lblRelogio);
        relogio.mostrarData(false);
        Thread thHora = relogio;
        thHora.start();
    }

    /**
     * Formata uma data
     * 
     * @return <code>String</code> com uma data por extenso
     */
    private String getDateTime() {

        DateFormat df = DateFormat.getDateInstance(DateFormat.FULL);
        Date date = new Date();
        return df.format(date);
    }

    /**
     * Faz inicializações do formulário
     * 
     * @throws SQLException 
     */
    private void inicializa() throws SQLException {
        this.addWindowListener();
        this.lblHoje.setText(this.getDateTime());
        this.lblUsuario.setText(user.getNomeUsuario());
        this.mostrarHora();
        if(!user.getCategoriaUsuario().equals("manut")){
         this.tarefasDia();
        }
        this.desenhaMenu();

    }
}
