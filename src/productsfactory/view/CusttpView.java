/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StateView.java
 *
 * Created on 18/05/2012, 20:17:34
 */
package productsfactory.view;


import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import productsfactory.model.CusttpModel;
import productsfactory.model.Fields;
import productsfactory.model.Offers;
import productsfactory.model.Verifyer;
import productsfactory.useful.ArquivosUtil;
import productsfactory.useful.ConexaoOracle;
import productsfactory.useful.FieldsUtil;

/**
 *
 * @author Julio
 */
public class CusttpView extends javax.swing.JFrame {
    
    private static CusttpView jFrame = null;
    
    /** Creates new form Menu */
    public CusttpView() {
        
    }
    
    
     public CusttpView(java.awt.Frame janela) {
       initComponents();
        
       this.txtDescricao.setText("BSR -Novo Portf√≥lio BL e Pacotes Adicionais");
       this.txtDlServiceCode.setText("10795");
       this.txtDlUpdateStamp.setText("4");
       this.txtOperatorID.setText("93277340");
       
       
       this.chSubA.setSelected(true);
       this.chSubK.setSelected(true);
       this.chSubP.setSelected(true);
       this.chSubW.setSelected(true);
       this.chSubG.setSelected(true);
       
       this.edtCodigo.setText("380551063\n" +
                                "380600681\n" +
                                "363001387\n" +
                                "380585340\n" +
                                "380419853");
        
    }
    
    public static CusttpView getFrameState(java.awt.Frame janela){
          if (jFrame == null) {
            jFrame = new CusttpView(janela);
        }
        return jFrame;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlAnatel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnCompile = new javax.swing.JButton();
        pnlAnatelInside = new javax.swing.JPanel();
        pnlEstados = new javax.swing.JPanel();
        chCheckAllSubTipos = new javax.swing.JCheckBox();
        chSubA = new javax.swing.JCheckBox();
        chSubB = new javax.swing.JCheckBox();
        chSubC = new javax.swing.JCheckBox();
        chSubD = new javax.swing.JCheckBox();
        chSubF = new javax.swing.JCheckBox();
        chSubG = new javax.swing.JCheckBox();
        chSubH = new javax.swing.JCheckBox();
        chSubI = new javax.swing.JCheckBox();
        chSubJ = new javax.swing.JCheckBox();
        chSubK = new javax.swing.JCheckBox();
        chSubM = new javax.swing.JCheckBox();
        chSubL = new javax.swing.JCheckBox();
        chSubN = new javax.swing.JCheckBox();
        chSubP = new javax.swing.JCheckBox();
        chSubR = new javax.swing.JCheckBox();
        chSubS = new javax.swing.JCheckBox();
        chSubT = new javax.swing.JCheckBox();
        chSubU = new javax.swing.JCheckBox();
        chSubW = new javax.swing.JCheckBox();
        chSubY = new javax.swing.JCheckBox();
        chSubZ = new javax.swing.JCheckBox();
        txtDescricao = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtDlServiceCode = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtOperatorID = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtDlUpdateStamp = new interfacegrafica.dpa.textfield.TextFieldDPA();
        lblDescricao = new interfacegrafica.dpa.labels.LabelDPA();
        lblOperatorID = new interfacegrafica.dpa.labels.LabelDPA();
        lblDlServiceCode = new interfacegrafica.dpa.labels.LabelDPA();
        lblDlUpdateStamp = new interfacegrafica.dpa.labels.LabelDPA();
        pnlOfertas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        edtCodigo = new javax.swing.JEditorPane();
        lblTitulo = new interfacegrafica.dpa.labels.LabelTituloDPA();
        pnlLog = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        edtLog = new javax.swing.JTextArea();
        pnlTipo = new javax.swing.JPanel();
        chCheckAllTipos = new javax.swing.JCheckBox();
        chTipoB = new javax.swing.JCheckBox();
        chTipoG = new javax.swing.JCheckBox();
        chTipoI = new javax.swing.JCheckBox();
        chTipoP = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Menu");

        pnlAnatel.setBackground(new java.awt.Color(255, 255, 255));

        jToolBar1.setRollover(true);

        btnCompile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/execute.png"))); // NOI18N
        btnCompile.setBorderPainted(false);
        btnCompile.setFocusable(false);
        btnCompile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCompile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompileActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCompile);

        pnlAnatelInside.setBackground(new java.awt.Color(255, 255, 255));
        pnlAnatelInside.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 5, true)));

        pnlEstados.setBackground(new java.awt.Color(255, 255, 255));
        pnlEstados.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sub Tipos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        chCheckAllSubTipos.setText("Check/Unchek All");
        chCheckAllSubTipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chCheckAllSubTiposActionPerformed(evt);
            }
        });

        chSubA.setText("A");
        chSubA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chSubAActionPerformed(evt);
            }
        });

        chSubB.setText("B");

        chSubC.setText("C");

        chSubD.setText("D");

        chSubF.setText("F");
        chSubF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chSubFActionPerformed(evt);
            }
        });

        chSubG.setText("G");

        chSubH.setText("H");

        chSubI.setText("I");
        chSubI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chSubIActionPerformed(evt);
            }
        });

        chSubJ.setText("J");

        chSubK.setText("K");

        chSubM.setText("M");

        chSubL.setText("L");

        chSubN.setText("N");

        chSubP.setText("P");

        chSubR.setText("R");

        chSubS.setText("S");

        chSubT.setText("T");

        chSubU.setText("U");

        chSubW.setText("W");

        chSubY.setText("Y");

        chSubZ.setText("Z");

        javax.swing.GroupLayout pnlEstadosLayout = new javax.swing.GroupLayout(pnlEstados);
        pnlEstados.setLayout(pnlEstadosLayout);
        pnlEstadosLayout.setHorizontalGroup(
            pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstadosLayout.createSequentialGroup()
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlEstadosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chCheckAllSubTipos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlEstadosLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chSubK)
                            .addComponent(chSubH)
                            .addComponent(chSubG)
                            .addComponent(chSubI)
                            .addComponent(chSubM)
                            .addComponent(chSubL)
                            .addComponent(chSubN)
                            .addComponent(chSubP)
                            .addComponent(chSubJ)
                            .addComponent(chSubF)
                            .addComponent(chSubD)
                            .addComponent(chSubC)
                            .addComponent(chSubB)
                            .addComponent(chSubA))
                        .addGap(30, 30, 30)
                        .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chSubY)
                            .addComponent(chSubR)
                            .addComponent(chSubW)
                            .addComponent(chSubS)
                            .addComponent(chSubU)
                            .addComponent(chSubT)
                            .addComponent(chSubZ))
                        .addGap(4, 4, 4)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        pnlEstadosLayout.setVerticalGroup(
            pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstadosLayout.createSequentialGroup()
                .addComponent(chCheckAllSubTipos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSubA)
                    .addComponent(chSubR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSubB)
                    .addComponent(chSubS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSubC)
                    .addComponent(chSubT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSubD)
                    .addComponent(chSubU))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSubF)
                    .addComponent(chSubW))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSubG)
                    .addComponent(chSubY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chSubH)
                    .addComponent(chSubZ))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chSubI, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chSubJ)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chSubK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chSubL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chSubM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chSubN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chSubP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblDescricao.setText("Descri√ß√£o BSR (Retirada do IW)");

        lblOperatorID.setText("Operator ID");

        lblDlServiceCode.setText("DL SERVICE CODE");

        lblDlUpdateStamp.setText("DL UPDATE STAMP");

        pnlOfertas.setBackground(new java.awt.Color(255, 255, 255));
        pnlOfertas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ofertas (SOC_CD)", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jScrollPane1.setHorizontalScrollBar(null);

        edtCodigo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(204, 204, 204), null, new java.awt.Color(153, 204, 255)));
        edtCodigo.setAutoscrolls(false);
        jScrollPane1.setViewportView(edtCodigo);

        javax.swing.GroupLayout pnlOfertasLayout = new javax.swing.GroupLayout(pnlOfertas);
        pnlOfertas.setLayout(pnlOfertasLayout);
        pnlOfertasLayout.setHorizontalGroup(
            pnlOfertasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOfertasLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        pnlOfertasLayout.setVerticalGroup(
            pnlOfertasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOfertasLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblTitulo.setText("GENERATE [CSM_OFFER_CUSTTP INSERT]");

        pnlLog.setBackground(new java.awt.Color(255, 255, 255));
        pnlLog.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log Panel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        edtLog.setBackground(new java.awt.Color(0, 0, 0));
        edtLog.setColumns(20);
        edtLog.setForeground(new java.awt.Color(0, 153, 0));
        edtLog.setRows(5);
        jScrollPane3.setViewportView(edtLog);

        javax.swing.GroupLayout pnlLogLayout = new javax.swing.GroupLayout(pnlLog);
        pnlLog.setLayout(pnlLogLayout);
        pnlLogLayout.setHorizontalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLogLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnlLogLayout.setVerticalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlTipo.setBackground(new java.awt.Color(255, 255, 255));
        pnlTipo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tipos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        chCheckAllTipos.setText("Check/Unchek All");
        chCheckAllTipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chCheckAllTiposActionPerformed(evt);
            }
        });

        chTipoB.setText("B");
        chTipoB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chTipoBActionPerformed(evt);
            }
        });

        chTipoG.setText("G");

        chTipoI.setText("I");

        chTipoP.setText("P");

        javax.swing.GroupLayout pnlTipoLayout = new javax.swing.GroupLayout(pnlTipo);
        pnlTipo.setLayout(pnlTipoLayout);
        pnlTipoLayout.setHorizontalGroup(
            pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTipoLayout.createSequentialGroup()
                .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlTipoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chCheckAllTipos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlTipoLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTipoLayout.createSequentialGroup()
                                .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chTipoI)
                                    .addComponent(chTipoP)
                                    .addComponent(chTipoG))
                                .addGap(77, 77, 77))
                            .addGroup(pnlTipoLayout.createSequentialGroup()
                                .addComponent(chTipoB)
                                .addGap(73, 73, 73)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTipoLayout.setVerticalGroup(
            pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTipoLayout.createSequentialGroup()
                .addComponent(chCheckAllTipos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chTipoB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chTipoG)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chTipoI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chTipoP)
                .addContainerGap(237, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlAnatelInsideLayout = new javax.swing.GroupLayout(pnlAnatelInside);
        pnlAnatelInside.setLayout(pnlAnatelInsideLayout);
        pnlAnatelInsideLayout.setHorizontalGroup(
            pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitulo)
                    .addComponent(lblDescricao)
                    .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                                .addComponent(pnlOfertas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(pnlEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pnlLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtOperatorID, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOperatorID))
                                .addGap(27, 27, 27)
                                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDlServiceCode, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDlServiceCode))
                                .addGap(27, 27, 27)
                                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDlUpdateStamp)
                                    .addComponent(txtDlUpdateStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        pnlAnatelInsideLayout.setVerticalGroup(
            pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                        .addComponent(lblTitulo)
                        .addGap(30, 30, 30)
                        .addComponent(lblDescricao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOperatorID)
                            .addComponent(lblDlServiceCode)
                            .addComponent(lblDlUpdateStamp))
                        .addGap(7, 7, 7)
                        .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDlUpdateStamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDlServiceCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOperatorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlOfertas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlAnatelInsideLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pnlTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pnlEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(796, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlAnatelLayout = new javax.swing.GroupLayout(pnlAnatel);
        pnlAnatel.setLayout(pnlAnatelLayout);
        pnlAnatelLayout.setHorizontalGroup(
            pnlAnatelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1393, Short.MAX_VALUE)
            .addGroup(pnlAnatelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlAnatelInside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAnatelLayout.setVerticalGroup(
            pnlAnatelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnatelLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1401, Short.MAX_VALUE))
            .addGroup(pnlAnatelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlAnatelLayout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addComponent(pnlAnatelInside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        getContentPane().add(pnlAnatel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompileActionPerformed
  
    this.edtLog.setText("");
    if (this.validaCampos()) {

        Fields fields = this.getFields();
        List<CusttpModel> tipos = this.retornaTipos();
        List<CusttpModel> subTipos = this.retornaSubTipos();
        List<String> ofertas = FieldsUtil.getEdtTextByLine(this.edtCodigo.getText());

        /**
         * JFile configuration *
         */
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecione o diret√≥rio para salvar os arquivos");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                edtLog.append("Iniciando...\n");
                edtLog.append("\n");
                edtLog.append("===================================\n");
                edtLog.append("Testando conex√£o com o banco de dados...\n");
                edtLog.append("===================================\n");
                Connection con = null;
                con = ConexaoOracle.getInstance().getConnection();
                if (con != null) {
                    this.PrintLog("Conectado com Sucesso!");
                    con.close();
                    con = null;
                    this.PrintLog("===================================");
                    this.PrintLog("\n");
                    this.PrintLog("===================================");
                    this.PrintLog("Verificando ofertas...");
                    this.PrintLog("===================================");

                    List<Offers> offers = Verifyer.verifyOfferExists(ofertas);
                    for (Offers oferta : offers) {
                        this.PrintLog(oferta.getSocCD() + " - " + oferta.getSocName() + " - " + oferta.getStatusOffer());
                    }
                    
                    this.PrintLog("===================================");
                    this.PrintLog("Verificando Tipo e Subtipo Selecionados...");
                    this.PrintLog("===================================");
                    this.PrintLog("\n");
                    this.PrintLog("===================================");
                    this.PrintLog("Tipo | SubTipo | Descri√ß√£o");
                    this.PrintLog("===================================");
                    for(String desc: this.retornaDescTipoSubtipo(tipos, subTipos)) {
                        this.PrintLog(desc);
                    }
                    
                    this.PrintLog("\n");
                    this.PrintLog("===================================");
                    this.PrintLog("");
                    this.PrintLog("===================================");

                    Path pathOS = Paths.get(fileChooser.getSelectedFile() + "\\" + fields.getDlServiceCode() + fields.getDlUpdateStamp());

                    /**
                     * Directorys and files Creation begin **
                     *
                     * /** Creates the OS Directory *
                     */
                    this.PrintLog("Criando diret√≥rio: " + pathOS.toString());
                    if (ArquivosUtil.createDir(pathOS.toString())) {
                        this.PrintLog("Diret√≥rio criado com sucesso!");
                    } else {
                        this.PrintLog("Erro ao criar diret√≥rio " + pathOS.toString());
                    }

                    /**
                     * Creates the INSERTS Directory *
                     */
                    this.PrintLog("Criando SubDiret√≥rio: " + pathOS.toString() + "\\INSERTS");
                    if (ArquivosUtil.createDir(pathOS.toString() + "\\INSERTS")) {
                        this.PrintLog("SubDiret√≥rio criado com sucesso!");
                    } else {
                        this.PrintLog("Erro ao criar SubDiret√≥rio " + pathOS.toString() + "\\INSERTS");
                    }

                    /**
                     * Creates the ROLLBACK Directory *
                     */
                    this.PrintLog("Criando SubDiret√≥rio: " + pathOS.toString() + "\\ROLLBACK");
                    if (ArquivosUtil.createDir(pathOS.toString() + "\\ROLLBACK")) {
                        this.PrintLog("SubDiret√≥rio criado com sucesso!");
                    } else {
                        this.PrintLog("Erro ao criar SubDiret√≥rio " + pathOS.toString() + "\\ROLLBACK");
                    }

                    /**
                     * Creates the VALIDATION Directory *
                     */
                    this.PrintLog("Criando SubDiret√≥rio: " + pathOS.toString() + "\\VALIDATION");
                    if (ArquivosUtil.createDir(pathOS.toString() + "\\VALIDATION")) {
                        this.PrintLog("SubDiret√≥rio criado com sucesso!");
                    } else {
                        this.PrintLog("Erro ao criar SubDiret√≥rio " + pathOS.toString() + "\\VALIDATION");
                    }

                    /**
                     * Creates the LOG Directory *
                     */
                    this.PrintLog("Criando SubDiret√≥rio: " + pathOS.toString() + "\\LOG");
                    if (ArquivosUtil.createDir(pathOS.toString() + "\\LOG")) {
                        this.PrintLog("SubDiret√≥rio criado com sucesso!");
                    } else {
                        this.PrintLog("Erro ao criar SubDiret√≥rio " + pathOS.toString() + "\\LOG");
                    }

                    this.PrintLog("===================================");
                    this.PrintLog("Gerando Script Inserts...");
                    this.PrintLog("===================================");

                    String contentInsert = "";//AnatelModel.generateInsertsAnatel(offers, anatels, tipos, fields);
                    this.PrintLog(contentInsert);

                    this.PrintLog("===================================");
                    this.PrintLog("Gerando Scripts de Rolback...");
                    this.PrintLog("===================================");
                    String contentDelete = ""; //AnatelModel.generateRollbackAnatel(offers, anatels, tipos, fields);
                    this.PrintLog(contentDelete);

                    this.PrintLog("===================================");
                    this.PrintLog("Gerando Query de Valida√ß√£o...");
                    this.PrintLog("===================================");
                    String contentSelect = "";//AnatelModel.generateSelectAnatel(offers, anatels, tipos, fields);
                    this.PrintLog(contentSelect);

                    if (ArquivosUtil.createFile(pathOS.toString() + "\\INSERTS\\" + fields.getOsNumber() + "_INSERTS.sql", contentInsert)
                            && ArquivosUtil.createFile(pathOS.toString() + "\\ROLLBACK\\" + fields.getOsNumber() + "_ROLLBACK.sql", contentDelete)
                            && ArquivosUtil.createFile(pathOS.toString() + "\\VALIDATION\\" + fields.getOsNumber() + "_VALIDATION.sql", contentSelect)) {

                        this.PrintLog("\n");
                        this.PrintLog("***************************************************************************************************************************");
                        this.PrintLog("***************************************************************************************************************************");
                        this.PrintLog("***                                                                       Processo Finalizado com sucesso!                                                           ***");
                        this.PrintLog("***************************************************************************************************************************");
                        this.PrintLog("***************************************************************************************************************************");
                        ArquivosUtil.createFile(pathOS.toString() + "\\LOG\\" + fields.getOsNumber() + "_LOG.txt", this.edtLog.getText());
                    }

                } else {

                    this.PrintLog("===================================");
                    this.PrintLog("Erro ao conectar ao banco de dados!");
                    this.PrintLog("===================================");
                }

            } catch (InterruptedException | SQLException | IOException ex) {
                Logger.getLogger(CusttpView.class.getName()).log(Level.SEVERE, null, ex);

            }

        } else {
            System.out.println("No Selection ");
        }
   }
          
}//GEN-LAST:event_btnCompileActionPerformed

    private void chCheckAllSubTiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chCheckAllSubTiposActionPerformed
        // TODO add your handling code here:
        if (this.chCheckAllSubTipos.isSelected() == false) {
            chSubA.setSelected(false);
            chSubB.setSelected(false);
            chSubC.setSelected(false);
            chSubD.setSelected(false);
            chSubF.setSelected(false);
            chSubG.setSelected(false);
            chSubH.setSelected(false);
            chSubI.setSelected(false);
            chSubJ.setSelected(false);
            chSubK.setSelected(false);
            chSubM.setSelected(false);
            chSubL.setSelected(false);
            chSubN.setSelected(false);
            chSubP.setSelected(false);
            chSubR.setSelected(false);
            chSubS.setSelected(false);
            chSubT.setSelected(false);
            chSubU.setSelected(false);
            chSubW.setSelected(false);
            chSubY.setSelected(false);
            chSubZ.setSelected(false);


        } else if (this.chCheckAllSubTipos.isSelected() == true) {

            chSubA.setSelected(true);
            chSubB.setSelected(true);
            chSubC.setSelected(true);
            chSubD.setSelected(true);
            chSubF.setSelected(true);
            chSubG.setSelected(true);
            chSubH.setSelected(true);
            chSubI.setSelected(true);
            chSubJ.setSelected(true);
            chSubK.setSelected(true);
            chSubM.setSelected(true);
            chSubL.setSelected(true);
            chSubN.setSelected(true);
            chSubP.setSelected(true);
            chSubR.setSelected(true);
            chSubS.setSelected(true);
            chSubT.setSelected(true);
            chSubU.setSelected(true);
            chSubW.setSelected(true);
            chSubY.setSelected(true);
            chSubZ.setSelected(true);

        }
    }//GEN-LAST:event_chCheckAllSubTiposActionPerformed

    private void chSubAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chSubAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chSubAActionPerformed

    private void chSubFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chSubFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chSubFActionPerformed

    private void chSubIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chSubIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chSubIActionPerformed

    private void chCheckAllTiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chCheckAllTiposActionPerformed
        // TODO add your handling code here:
         if (this.chCheckAllTipos.isSelected() == false) {
            chTipoB.setSelected(false);
            chTipoG.setSelected(false);
            chTipoI.setSelected(false);
            chTipoP.setSelected(false);

        } else if (this.chCheckAllTipos.isSelected() == true) {

            chTipoB.setSelected(true);
            chTipoG.setSelected(true);
            chTipoI.setSelected(true);
            chTipoP.setSelected(true);
        }
        
    }//GEN-LAST:event_chCheckAllTiposActionPerformed

    private void chTipoBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chTipoBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chTipoBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCompile;
    private javax.swing.JCheckBox chCheckAllSubTipos;
    private javax.swing.JCheckBox chCheckAllTipos;
    private javax.swing.JCheckBox chSubA;
    private javax.swing.JCheckBox chSubB;
    private javax.swing.JCheckBox chSubC;
    private javax.swing.JCheckBox chSubD;
    private javax.swing.JCheckBox chSubF;
    private javax.swing.JCheckBox chSubG;
    private javax.swing.JCheckBox chSubH;
    private javax.swing.JCheckBox chSubI;
    private javax.swing.JCheckBox chSubJ;
    private javax.swing.JCheckBox chSubK;
    private javax.swing.JCheckBox chSubL;
    private javax.swing.JCheckBox chSubM;
    private javax.swing.JCheckBox chSubN;
    private javax.swing.JCheckBox chSubP;
    private javax.swing.JCheckBox chSubR;
    private javax.swing.JCheckBox chSubS;
    private javax.swing.JCheckBox chSubT;
    private javax.swing.JCheckBox chSubU;
    private javax.swing.JCheckBox chSubW;
    private javax.swing.JCheckBox chSubY;
    private javax.swing.JCheckBox chSubZ;
    private javax.swing.JCheckBox chTipoB;
    private javax.swing.JCheckBox chTipoG;
    private javax.swing.JCheckBox chTipoI;
    private javax.swing.JCheckBox chTipoP;
    private javax.swing.JEditorPane edtCodigo;
    private javax.swing.JTextArea edtLog;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblDlServiceCode;
    private javax.swing.JLabel lblDlUpdateStamp;
    private javax.swing.JLabel lblOperatorID;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlAnatel;
    private javax.swing.JPanel pnlAnatelInside;
    private javax.swing.JPanel pnlEstados;
    private javax.swing.JPanel pnlLog;
    private javax.swing.JPanel pnlOfertas;
    private javax.swing.JPanel pnlTipo;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtDlServiceCode;
    private javax.swing.JTextField txtDlUpdateStamp;
    private javax.swing.JTextField txtOperatorID;
    // End of variables declaration//GEN-END:variables

    /**
    * Valida os campos necess√°rios
    * para a altera√ß√£o da senha
    * @return 
    */
    private boolean validaCampos() {
    

        if (this.edtCodigo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Oferta(s) s√£o obrigat√≥rias", "Aten√ß√£o!", 2);
            return false;
        } else if (this.txtDescricao.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Descri√ß√£o √© Obrigat√≥ria", "Aten√ß√£o!", 2);
            return false;
        } else if (this.txtDlServiceCode.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DL SERVICE CODE √© Obrigat√≥rio", "Aten√ß√£o!", 2);
            return false;
        } else if (this.txtOperatorID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "OPERATOR ID √© Obrigat√≥rio", "Aten√ß√£o!", 2);
            return false;
        }else if (this.txtDlUpdateStamp.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DL UPDATE STAMP √© Obrigat√≥rio", "Aten√ß√£o!", 2);
            return false;
        }else if (!this.validaCheckboxTipo()) {
            JOptionPane.showMessageDialog(this, "Selecione ao menos um Tipo!", "Aten√ß√£o!", 2);
            return false;
        }else if (!this.validaCheckboxSubtipo()) {
            JOptionPane.showMessageDialog(this, "Selecione ao menos um SubTipo!", "Aten√ß√£o!", 2);
            return false;
        }
        
        return true;
    }
    
    public List<CusttpModel> retornaTipos(){
        
        List<CusttpModel> listTipos = new ArrayList<>();
        
        JCheckBox[] vetChebox = new JCheckBox[4];
        
        vetChebox[0] = chTipoB;
        vetChebox[1] = chTipoG;
        vetChebox[2] = chTipoI;
        vetChebox[3] = chTipoP;
        
        String[] vetSubTipos = new String[4];
        
        vetSubTipos[0] = "B";
        vetSubTipos[1] = "G";
        vetSubTipos[2] = "I";
        vetSubTipos[3] = "P";
    
        for(int i = 0; i < vetChebox.length;i++){
            if(vetChebox[i].isSelected()){
               CusttpModel custtp = new CusttpModel();
               custtp.setTipo(vetSubTipos[i]);
               listTipos.add(custtp);
            }
        }
        
        return listTipos;
    }
    
    
    public List<CusttpModel> retornaSubTipos(){
        
        List<CusttpModel> listSubTipos = new ArrayList<>();
        
        JCheckBox[] vetChebox = new JCheckBox[21];
        
        vetChebox[0] = chSubA;
        vetChebox[1] = chSubB;
        vetChebox[2] = chSubC;
        vetChebox[3] = chSubD;
        vetChebox[4] = chSubF;
        vetChebox[5] = chSubG;
        vetChebox[6] = chSubH;
        vetChebox[7] = chSubI;
        vetChebox[8] = chSubJ;
        vetChebox[9] = chSubK;
        vetChebox[10] = chSubM;
        vetChebox[11] = chSubL;
        vetChebox[12] = chSubN;
        vetChebox[13] = chSubP;
        vetChebox[14] = chSubR;
        vetChebox[15] = chSubS;
        vetChebox[16] = chSubT;
        vetChebox[17] = chSubU;
        vetChebox[18] = chSubW;
        vetChebox[19] = chSubY;
        vetChebox[20] = chSubZ;
      
        
        
        String[] vetSubTipos = new String[21];
        
        vetSubTipos[0] = "A";
        vetSubTipos[1] = "B";
        vetSubTipos[2] = "C";
        vetSubTipos[3] = "D";
        vetSubTipos[4] = "F";
        vetSubTipos[5] = "G";
        vetSubTipos[6] = "H";
        vetSubTipos[7] = "I";
        vetSubTipos[8] = "J";
        vetSubTipos[9] = "K";
        vetSubTipos[10] = "L";
        vetSubTipos[11] = "M";
        vetSubTipos[12] = "N";
        vetSubTipos[13] = "P";
        vetSubTipos[14] = "R";
        vetSubTipos[15] = "S";
        vetSubTipos[16] = "T";
        vetSubTipos[17] = "U";
        vetSubTipos[18] = "W";
        vetSubTipos[19] = "Y";
        vetSubTipos[20] = "Z";
        
        for(int i = 0; i < vetChebox.length;i++){
            if(vetChebox[i].isSelected()){
               CusttpModel custtp = new CusttpModel();
               custtp.setSubTipo(vetSubTipos[i]);
               listSubTipos.add(custtp);
            }
               
                          
        }
        
        
        return listSubTipos;
    }
    
    private Fields getFields(){
        
        Fields fields = new Fields();
        
        fields.setDlServiceCode(this.txtDlServiceCode.getText());
        fields.setDlUpdateStamp(this.txtDlUpdateStamp.getText());
        fields.setOperatorID(this.txtOperatorID.getText());
        fields.setOsDesc(this.txtDescricao.getText());
        
        return fields;
        
        
    }
   
    private boolean validaCheckboxSubtipo(){
    
        JCheckBox[] vetChebox = new JCheckBox[21];
        
        vetChebox[0] = chSubA;
        vetChebox[1] = chSubB;
        vetChebox[2] = chSubC;
        vetChebox[3] = chSubD;
        vetChebox[4] = chSubF;
        vetChebox[5] = chSubG;
        vetChebox[6] = chSubH;
        vetChebox[7] = chSubI;
        vetChebox[8] = chSubJ;
        vetChebox[9] = chSubK;
        vetChebox[10] = chSubM;
        vetChebox[11] = chSubL;
        vetChebox[12] = chSubN;
        vetChebox[13] = chSubP;
        vetChebox[14] = chSubR;
        vetChebox[15] = chSubS;
        vetChebox[16] = chSubT;
        vetChebox[17] = chSubU;
        vetChebox[18] = chSubW;
        vetChebox[19] = chSubY;
        vetChebox[20] = chSubZ;
        
        
        for (JCheckBox vetChebox1 : vetChebox) {
            if (vetChebox1.isSelected()) {
                return true;
            }
        }
        
      return false;   
        
    }
    
    public List<String> retornaDescTipoSubtipo(List<CusttpModel> tipo, List<CusttpModel> subTipo){
        
        List<String> descTypeSubType = new ArrayList<>();
        
        for(CusttpModel type : tipo){
            
            for(CusttpModel subType : subTipo){
                                           
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("A")){
                    descTypeSubType.add("  B    |      A       | Comercial - Grandes Contas");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("C")){
                    descTypeSubType.add("  B    |      C       | Comercial - Top Regional");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("D")){
                    descTypeSubType.add("  B    |      D       | Comercial - Top Accounts Especiais");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("G")){
                    descTypeSubType.add("  B    |      G       | Comercial - Associa√ß√µes e Cooperativa");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("H")){
                    descTypeSubType.add("  B    |      H       | Comercial - Teste");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("L")){
                    descTypeSubType.add("  B    |      L       | Comercial - Rastreamento e Telemetria");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("M")){
                    descTypeSubType.add("  B    |      M       | Comercial - Pequena & M√©dia Empresa (PME)");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("N")){
                    descTypeSubType.add("  B    |      N       | Comercial - Top Accounts");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("S")){
                    descTypeSubType.add("  B    |      S       | Comercial - AACE");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("T")){
                    descTypeSubType.add("  B    |      T       | Comercial - Rastreamento e Telemetria DENATRAM");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("U")){
                    descTypeSubType.add("  B    |      U       | Comercial - Produtor Rural");
                    continue;
                }
                
                if(type.getTipo().equals("B") && subType.getSubTipo().equals("Z")){
                    descTypeSubType.add("  B    |      Z       | Comercial - Street Seller");
                    continue;
                }
                
                if(type.getTipo().equals("G") && subType.getSubTipo().equals("R")){
                    descTypeSubType.add("  G    |      R       | Governo - Normal");
                    continue;
                }
                
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("B")){
                    descTypeSubType.add("  I    |      B       | Individual - Combo Multi Claro");
                    continue;
                }
                
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("C")){
                    descTypeSubType.add("  I    |      C       | Individual - Membro de Embaixada e Consulado");
                    continue;
                }
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("F")){
                    descTypeSubType.add("  I    |      F       | Individual - Formador de Opni√£o");
                    continue;
                }
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("I")){
                    descTypeSubType.add("  I    |      I       | Individual - Pr√©-Pago");
                    continue;
                }
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("J")){
                    descTypeSubType.add("  I    |      J       | Individual - Grandes Clientes");
                    continue;
                }
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("N")){
                    descTypeSubType.add("  I    |      N       | Individual - √çndio");
                    continue;
                }
                
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("P")){
                    descTypeSubType.add("  I    |      P       | Individual - Profissional Liberal");
                    continue;
                }
                
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("R")){
                    descTypeSubType.add("  I    |      R       | Individual - Normal");
                    continue;
                }
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("T")){
                    descTypeSubType.add("  I    |      T       | Individual - Triple A");
                    continue;
                }
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("W")){
                    descTypeSubType.add("  I    |      W       | Individual - Claro Combo Fixo");
                    continue;
                }
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("Y")){
                    descTypeSubType.add("  I    |      Y       | Individual - Associado");
                    continue;
                }
                if(type.getTipo().equals("I") && subType.getSubTipo().equals("Z")){
                    descTypeSubType.add("  I    |      Z       | Individual - Combo Multi Net");
                    continue;
                }
                
                if(type.getTipo().equals("P") && subType.getSubTipo().equals("K")){
                    descTypeSubType.add("  P    |      K       | Pessoa F√≠sica - Empresa");
                }
                
            }
            
        }
        
        
        return descTypeSubType;
    }
    
    
     private boolean validaCheckboxTipo(){
    
        JCheckBox[] vetChebox = new JCheckBox[4];
        
        vetChebox[0] = chTipoB;
        vetChebox[1] = chTipoG;
        vetChebox[2] = chTipoI;
        vetChebox[3] = chTipoP;
        
        
        for (JCheckBox vetChebox1 : vetChebox) {
            if (vetChebox1.isSelected()) {
                return true;
            }
        }
        
      return false;   
        
    }
    
    
    public void PrintLog(String textLog) throws InterruptedException{
        
                    edtLog.append(textLog + "\n");
                    edtLog.update(edtLog.getGraphics());
        
   }
}

