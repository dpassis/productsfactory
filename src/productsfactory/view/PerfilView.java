/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StateView.java
 *
 * Created on 18/05/2012, 20:17:34
 */
package productsfactory.view;


import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import productsfactory.control.PerfilControl;
import productsfactory.model.Fields;
import productsfactory.model.Offers;
import productsfactory.model.Verifyer;
import productsfactory.useful.ArquivosUtil;
import productsfactory.useful.ConexaoOracle;
import productsfactory.useful.FieldsUtil;

/**
 *
 * @author Julio
 */
public class PerfilView extends javax.swing.JFrame {
    
    StringBuilder strLog = new StringBuilder();
    private static PerfilView jFramePerfil = null;
    
    /** Creates new form Menu */
    public PerfilView() {
        
    }
    
    
     public PerfilView(java.awt.Frame janela) {
        initComponents();
        //this.edtCodigo.setVisible(false);
        
       this.txtDescricao.setText("BSR -Novo Portfólio BL e Pacotes Adicionais");
       this.txtDlServiceCode.setText("10795");
       this.txtDlUpdateStamp.setText("4");
       this.txtOperatorID.setText("93277340");
       
       
     
       
       this.edtPerfil.setText("380551063\n" +
                                "380600681\n" +
                                "363001387\n" +
                                "380585340\n" +
                                "380419853");
               
       
        
    }
    
    public static PerfilView getFramePerfil(java.awt.Frame janela){
          if (jFramePerfil == null) {
            jFramePerfil = new PerfilView(janela);
        }
        return jFramePerfil;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMenu = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnCompile = new javax.swing.JButton();
        pnlMenu1 = new javax.swing.JPanel();
        pnlPerfis = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        edtPerfil = new javax.swing.JEditorPane();
        txtDescricao = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtDlServiceCode = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtOperatorID = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtDlUpdateStamp = new interfacegrafica.dpa.textfield.TextFieldDPA();
        lblDescricao = new interfacegrafica.dpa.labels.LabelDPA();
        lblOperatorID = new interfacegrafica.dpa.labels.LabelDPA();
        lblDlServiceCode = new interfacegrafica.dpa.labels.LabelDPA();
        lblDlUpdateStamp = new interfacegrafica.dpa.labels.LabelDPA();
        pnlOfertas = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        edtCodigo = new javax.swing.JEditorPane();
        lblTitulo = new interfacegrafica.dpa.labels.LabelTituloDPA();
        pnlLog = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        edtLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Menu");

        pnlMenu.setBackground(new java.awt.Color(255, 255, 255));

        jToolBar1.setRollover(true);

        btnCompile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/execute.png"))); // NOI18N
        btnCompile.setBorderPainted(false);
        btnCompile.setFocusable(false);
        btnCompile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCompile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompileActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCompile);

        pnlMenu1.setBackground(new java.awt.Color(255, 255, 255));
        pnlMenu1.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 5, true)));

        pnlPerfis.setBackground(new java.awt.Color(255, 255, 255));
        pnlPerfis.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Perfis", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jScrollPane1.setHorizontalScrollBar(null);

        edtPerfil.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(204, 204, 204), null, new java.awt.Color(153, 204, 255)));
        edtPerfil.setAutoscrolls(false);
        jScrollPane1.setViewportView(edtPerfil);

        javax.swing.GroupLayout pnlPerfisLayout = new javax.swing.GroupLayout(pnlPerfis);
        pnlPerfis.setLayout(pnlPerfisLayout);
        pnlPerfisLayout.setHorizontalGroup(
            pnlPerfisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPerfisLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        pnlPerfisLayout.setVerticalGroup(
            pnlPerfisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPerfisLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblDescricao.setText("Descrição BSR (Retirada do IW)");

        lblOperatorID.setText("Operator ID");

        lblDlServiceCode.setText("DL SERVICE CODE");

        lblDlUpdateStamp.setText("DL UPDATE STAMP");

        pnlOfertas.setBackground(new java.awt.Color(255, 255, 255));
        pnlOfertas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ofertas (SOC_CD)", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jScrollPane2.setHorizontalScrollBar(null);

        edtCodigo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(204, 204, 204), null, new java.awt.Color(153, 204, 255)));
        edtCodigo.setAutoscrolls(false);
        jScrollPane2.setViewportView(edtCodigo);

        javax.swing.GroupLayout pnlOfertasLayout = new javax.swing.GroupLayout(pnlOfertas);
        pnlOfertas.setLayout(pnlOfertasLayout);
        pnlOfertasLayout.setHorizontalGroup(
            pnlOfertasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOfertasLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        pnlOfertasLayout.setVerticalGroup(
            pnlOfertasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOfertasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lblTitulo.setText("GENERATE PERFIL (BSR)");

        pnlLog.setBackground(new java.awt.Color(255, 255, 255));
        pnlLog.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log Panel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        edtLog.setBackground(new java.awt.Color(0, 0, 0));
        edtLog.setColumns(20);
        edtLog.setForeground(new java.awt.Color(0, 153, 0));
        edtLog.setRows(5);
        jScrollPane3.setViewportView(edtLog);

        javax.swing.GroupLayout pnlLogLayout = new javax.swing.GroupLayout(pnlLog);
        pnlLog.setLayout(pnlLogLayout);
        pnlLogLayout.setHorizontalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLogLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnlLogLayout.setVerticalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlMenu1Layout = new javax.swing.GroupLayout(pnlMenu1);
        pnlMenu1.setLayout(pnlMenu1Layout);
        pnlMenu1Layout.setHorizontalGroup(
            pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenu1Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitulo)
                    .addComponent(lblDescricao)
                    .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlMenu1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMenu1Layout.createSequentialGroup()
                                .addComponent(pnlOfertas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(pnlPerfis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94)
                                .addComponent(pnlLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMenu1Layout.createSequentialGroup()
                                .addGroup(pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtOperatorID, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOperatorID))
                                .addGap(27, 27, 27)
                                .addGroup(pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDlServiceCode, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDlServiceCode))
                                .addGap(27, 27, 27)
                                .addGroup(pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDlUpdateStamp)
                                    .addComponent(txtDlUpdateStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        pnlMenu1Layout.setVerticalGroup(
            pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenu1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblTitulo)
                .addGap(30, 30, 30)
                .addComponent(lblDescricao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOperatorID)
                    .addComponent(lblDlServiceCode)
                    .addComponent(lblDlUpdateStamp))
                .addGap(7, 7, 7)
                .addGroup(pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDlUpdateStamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDlServiceCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOperatorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMenu1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(pnlLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlMenu1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(pnlMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlPerfis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlOfertas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(814, 814, 814))
        );

        javax.swing.GroupLayout pnlMenuLayout = new javax.swing.GroupLayout(pnlMenu);
        pnlMenu.setLayout(pnlMenuLayout);
        pnlMenuLayout.setHorizontalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1323, Short.MAX_VALUE)
            .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlMenu1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMenuLayout.setVerticalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1423, Short.MAX_VALUE))
            .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMenuLayout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addComponent(pnlMenu1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        getContentPane().add(pnlMenu, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompileActionPerformed
      this.edtLog.setText("");
      if(this.validaCampos()) {
      
        Fields fields = this.getFields();
        List<String> perfis = FieldsUtil.getEdtTextByLine(this.edtCodigo.getText());
        
      
         //JFile configuration
        JFileChooser  fileChooser = new JFileChooser();  
        fileChooser.setDialogTitle("Selecione o diretório para salvar os arquivos");  
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  
        fileChooser.setAcceptAllFileFilterUsed(false);
       
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) { 
            try {
              edtLog.append("Iniciando...\n");
              edtLog.append("\n");
              edtLog.append("===================================\n");
              edtLog.append("Testando conexão com o banco de dados...\n");
              edtLog.append("===================================\n");
              Connection con = null;
              con = ConexaoOracle.getInstance().getConnection();
              if(con != null){
                this.PrintLog("Conectado com Sucesso!");
                con.close();
                con = null;
                this.PrintLog("===================================");
                this.PrintLog("\n");
                this.PrintLog("===================================");
                this.PrintLog("Verificando ofertas...");
                this.PrintLog("===================================");
                System.out.println(this.edtPerfil.getText());
                List<Offers> offers = Verifyer.verifyOfferExists(perfis);
                for(int i = 0; i < offers.size();i++){
                   // System.out.println(offers.get(i));
                    this.PrintLog(offers.get(i).getSocCD()+" - "+offers.get(i).getSocName()+" - "+offers.get(i).getStatusOffer());
                    System.out.println(offers.get(i).getSocCD()+" - "+offers.get(i).getSocName()+" - "+offers.get(i).getStatusOffer());
                    //Verifyer.verifyOfferExists(offers.get(i).toString());
                }
                this.PrintLog("\n");
                this.PrintLog("===================================");
                this.PrintLog("Perfis Selecionados:");
                this.PrintLog("===================================");
                this.PrintLog(perfis.toString());
                this.PrintLog("\n");
                
                Path pathOS = Paths.get(fileChooser.getSelectedFile()+"\\"+fields.getDlServiceCode()+fields.getDlUpdateStamp());
                
                /** Directorys and  files Creation begin **
                
                /** Creates the OS Directory **/
                this.PrintLog("Criando diretório: "+pathOS.toString());
                if(ArquivosUtil.createDir(pathOS.toString())){
                    this.PrintLog("Diretório criado com sucesso!");
                }else{ 
                    this.PrintLog("Erro ao criar diretório "+pathOS.toString());
                }
                
                /** Creates the INSERTS Directory **/
                this.PrintLog("Criando SubDiretório: " + pathOS.toString()+"\\INSERTS");
                if(ArquivosUtil.createDir(pathOS.toString()+"\\INSERTS")){
                    this.PrintLog("SubDiretório criado com sucesso!");
                }else{ 
                    this.PrintLog("Erro ao criar SubDiretório "+pathOS.toString()+"\\INSERTS");
                }

                /** Creates the ROLLBACK Directory **/
                this.PrintLog("Criando SubDiretório: " + pathOS.toString()+"\\ROLLBACK");
                if(ArquivosUtil.createDir(pathOS.toString()+"\\ROLLBACK")){
                    this.PrintLog("SubDiretório criado com sucesso!");
                }else{ 
                    this.PrintLog("Erro ao criar SubDiretório "+pathOS.toString()+"\\ROLLBACK");
                }
                
                /** Creates the VALIDATION Directory **/
                this.PrintLog("Criando SubDiretório: " + pathOS.toString()+"\\VALIDATION");
                if(ArquivosUtil.createDir(pathOS.toString()+"\\VALIDATION")){
                    this.PrintLog("SubDiretório criado com sucesso!");
                }else{ 
                    this.PrintLog("Erro ao criar SubDiretório "+pathOS.toString()+"\\VALIDATION");
                }

                /** Creates the LOG Directory **/
                this.PrintLog("Criando SubDiretório: " + pathOS.toString()+"\\LOG");
                if(ArquivosUtil.createDir(pathOS.toString()+"\\LOG")){
                    this.PrintLog("SubDiretório criado com sucesso!");
                }else{ 
                    this.PrintLog("Erro ao criar SubDiretório "+pathOS.toString()+"\\LOG");
                }
                
                
                this.PrintLog("===================================");
                this.PrintLog("Gerar Script Inserts...");
                this.PrintLog("===================================");

                String contentInsert = PerfilControl.generateInsertsPerfil(offers, perfis, fields);
                this.PrintLog(contentInsert);
                
                this.PrintLog("===================================");
                this.PrintLog("Gerar Scripts de Rolback...");
                this.PrintLog("===================================");
                String contentDelete =  PerfilControl.generateRollbackPerfil(offers, perfis, fields);
                this.PrintLog(contentDelete);
                
                this.PrintLog("===================================");
                this.PrintLog("Gerando Query de Validação...");
                this.PrintLog("===================================");
                String contentSelect =  PerfilControl.generateSelectPerfil(offers, perfis, fields);
                this.PrintLog(contentSelect);
                

                    if(ArquivosUtil.createFile(pathOS.toString()+"\\INSERTS\\"+fields.getOsNumber()+"_INSERTS.sql",contentInsert) &&
                        ArquivosUtil.createFile(pathOS.toString()+"\\ROLLBACK\\"+fields.getOsNumber()+"_ROLLBACK.sql",contentDelete) &&
                        ArquivosUtil.createFile(pathOS.toString()+"\\VALIDATION\\"+fields.getOsNumber()+"_VALIDATION.sql",contentSelect)){
              
                     this.PrintLog("\n");
                     this.PrintLog("***************************************************************************************************************************");
                     this.PrintLog("***************************************************************************************************************************");
                     this.PrintLog("***                                                                       Processo Finalizado com sucesso!                                                           ***");
                     this.PrintLog("***************************************************************************************************************************");
                     this.PrintLog("***************************************************************************************************************************");
                     ArquivosUtil.createFile(pathOS.toString()+"\\LOG\\"+fields.getOsNumber()+"_LOG.txt",this.edtLog.getText());
                    }
                  
              }else {
                  
                  this.PrintLog("===================================");
                  this.PrintLog("Erro ao conectar ao banco de dados!");
                  this.PrintLog("===================================");
              }
              
      } catch (InterruptedException | SQLException | IOException  ex) {
          Logger.getLogger(PerfilView.class.getName()).log(Level.SEVERE, null, ex);
         
      }
       
     } else {
        System.out.println("No Selection ");
    }
   }
          
}//GEN-LAST:event_btnCompileActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCompile;
    private javax.swing.JEditorPane edtCodigo;
    private javax.swing.JTextArea edtLog;
    private javax.swing.JEditorPane edtPerfil;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblDlServiceCode;
    private javax.swing.JLabel lblDlUpdateStamp;
    private javax.swing.JLabel lblOperatorID;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlLog;
    private javax.swing.JPanel pnlMenu;
    private javax.swing.JPanel pnlMenu1;
    private javax.swing.JPanel pnlOfertas;
    private javax.swing.JPanel pnlPerfis;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtDlServiceCode;
    private javax.swing.JTextField txtDlUpdateStamp;
    private javax.swing.JTextField txtOperatorID;
    // End of variables declaration//GEN-END:variables

    /**
    * Valida os campos necessários
    * para a alteração da senha
    * @return 
    */
    private boolean validaCampos() {
    

        if (this.edtPerfil.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Oferta(s) são obrigatórias", "Atenção!", 2);
            return false;
        } else if (this.edtPerfil.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Insira ao menos um PERFIL!", "Atenção!", 2);
            return false;
        } else if (this.txtDescricao.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Descrição é Obrigatória", "Atenção!", 2);
            return false;
        } else if (this.txtDlServiceCode.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DL SERVICE CODE é Obrigatório", "Atenção!", 2);
            return false;
        } else if (this.txtOperatorID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "OPERATOR ID é Obrigatório", "Atenção!", 2);
            return false;
        }else if (this.txtDlUpdateStamp.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DL UPDATE STAMP é Obrigatório", "Atenção!", 2);
            return false;
        }
        
        return true;
    }
    
    
    private Fields getFields(){
        
        Fields fields = new Fields();
        
        fields.setDlServiceCode(this.txtDlServiceCode.getText());
        fields.setDlUpdateStamp(this.txtDlUpdateStamp.getText());
        fields.setOperatorID(this.txtOperatorID.getText());
        fields.setOsDesc(this.txtDescricao.getText());
        
        return fields;
        
        
    }
    
    public void PrintLog(String textLog) throws InterruptedException{
        
                    edtLog.append(textLog + "\n");
                    edtLog.update(edtLog.getGraphics());
        
   }
}

