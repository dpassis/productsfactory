/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StateView.java
 *
 * Created on 18/05/2012, 20:17:34
 */
package productsfactory.view;


import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import productsfactory.model.Fields;
import productsfactory.model.Offers;
import productsfactory.model.PerfilModel;
import productsfactory.model.Prefixo;
import productsfactory.model.Usuario;
import productsfactory.model.Verifyer;
import productsfactory.useful.ArquivosUtil;
import productsfactory.useful.ConexaoOracle;
import productsfactory.useful.FieldsUtil;

/**
 *
 * @author Julio
 */
public class PerfilView extends javax.swing.JFrame {
    
    StringBuilder strLog = new StringBuilder();
    private static PerfilView jFramePerfil = null;
    private static Usuario user = null;
    
    /** Creates new form Menu */
    public PerfilView() {
        
    }
    
    
     public PerfilView(java.awt.Frame janela, Usuario usuario) {
        initComponents();
        user = usuario;
        this.inicializa();
        //this.edtCodigo.setVisible(false);
        
      /* this.txtDescricao.setText("BSR -Novo Portfólio BL e Pacotes Adicionais");
       this.txtDlServiceCode.setText("10795");
       this.txtDlUpdateStamp.setText("4");
       this.txtOperatorID.setText("93277340");
       
       
     
       
       this.edtCodigo.setText("167000887\n"+
                                "167000889\n"+
                                "169000753\n"+
                                "169000952\n"+
                                "169000979\n"+
                                "169000991\n"+
                                "169001090\n"+
                                "169001154\n"+
                                "169001208\n"+
                                "169001235\n"+
                                "169001264\n");

       
       this.edtPerfil.setText("ACORPSUP\n"+
                            "_ANCONTPF\n"+
                            "_BCKPF_MU\n"+
                            "_POSFATSUP\n"+
                            "_TIEAI\n"+
                            "_PROCESSOS\n"+
                            "_TMK_TERCO\n"+
                            "_COBRGECOR\n"+
                            "_VIDEOCOOR"
                            );
               */
       
        
    }
    
    public static PerfilView getFramePerfil(java.awt.Frame janela){
          if (jFramePerfil == null) {
            jFramePerfil = new PerfilView(janela,user);
        }
        return jFramePerfil;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPerfil = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnCompile = new javax.swing.JButton();
        pnlPerfilInside = new javax.swing.JPanel();
        pnlPerfis = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        edtPerfil = new javax.swing.JEditorPane();
        txtDescricao = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtDlServiceCode = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtOperatorID = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtDlUpdateStamp = new interfacegrafica.dpa.textfield.TextFieldDPA();
        lblDescricao = new interfacegrafica.dpa.labels.LabelDPA();
        lblOperatorID = new interfacegrafica.dpa.labels.LabelDPA();
        lblDlServiceCode = new interfacegrafica.dpa.labels.LabelDPA();
        lblDlUpdateStamp = new interfacegrafica.dpa.labels.LabelDPA();
        pnlOfertas = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        edtCodigo = new javax.swing.JEditorPane();
        lblTitulo = new interfacegrafica.dpa.labels.LabelTituloDPA();
        pnlLog = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        edtLog = new javax.swing.JTextArea();
        lblDescricaoFuncional = new interfacegrafica.dpa.labels.LabelDPA();
        jScrollPane4 = new javax.swing.JScrollPane();
        txaDescricaoFuncional = new interfacegrafica.dpa.textarea.TextAreaDPA();
        lblPrefixo = new interfacegrafica.dpa.labels.LabelDPA();
        cmbPrefixo = new interfacegrafica.dpa.combobox.ComboboxDPA();
        lblSincronismo = new interfacegrafica.dpa.labels.LabelDPA();
        cmbSincronismo = new interfacegrafica.dpa.combobox.ComboboxDPA();
        lblMantis = new interfacegrafica.dpa.labels.LabelDPA();
        txtMantis = new interfacegrafica.dpa.textfield.TextFieldDPA();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Perfil");

        pnlPerfil.setBackground(new java.awt.Color(255, 255, 255));

        jToolBar1.setRollover(true);

        btnCompile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/execute.png"))); // NOI18N
        btnCompile.setBorderPainted(false);
        btnCompile.setFocusable(false);
        btnCompile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCompile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompileActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCompile);

        pnlPerfilInside.setBackground(new java.awt.Color(255, 255, 255));
        pnlPerfilInside.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 5, true)));

        pnlPerfis.setBackground(new java.awt.Color(255, 255, 255));
        pnlPerfis.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Perfis", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jScrollPane1.setHorizontalScrollBar(null);

        edtPerfil.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(204, 204, 204), null, new java.awt.Color(153, 204, 255)));
        edtPerfil.setAutoscrolls(false);
        jScrollPane1.setViewportView(edtPerfil);

        javax.swing.GroupLayout pnlPerfisLayout = new javax.swing.GroupLayout(pnlPerfis);
        pnlPerfis.setLayout(pnlPerfisLayout);
        pnlPerfisLayout.setHorizontalGroup(
            pnlPerfisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPerfisLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        pnlPerfisLayout.setVerticalGroup(
            pnlPerfisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPerfisLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lblDescricao.setText("Descrição BSR (Retirada do IW)");

        lblOperatorID.setText("Operator ID");

        lblDlServiceCode.setText("DL SERVICE CODE");

        lblDlUpdateStamp.setText("DL UPDATE STAMP");

        pnlOfertas.setBackground(new java.awt.Color(255, 255, 255));
        pnlOfertas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ofertas (SOC_CD)", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jScrollPane2.setHorizontalScrollBar(null);

        edtCodigo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(204, 204, 204), null, new java.awt.Color(153, 204, 255)));
        edtCodigo.setAutoscrolls(false);
        jScrollPane2.setViewportView(edtCodigo);

        javax.swing.GroupLayout pnlOfertasLayout = new javax.swing.GroupLayout(pnlOfertas);
        pnlOfertas.setLayout(pnlOfertasLayout);
        pnlOfertasLayout.setHorizontalGroup(
            pnlOfertasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOfertasLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        pnlOfertasLayout.setVerticalGroup(
            pnlOfertasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOfertasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lblTitulo.setText("GENERATE INSERT CSM_OFFER_SALE_CHANNEL");

        pnlLog.setBackground(new java.awt.Color(255, 255, 255));
        pnlLog.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log Panel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        edtLog.setBackground(new java.awt.Color(0, 0, 0));
        edtLog.setColumns(20);
        edtLog.setForeground(new java.awt.Color(0, 153, 0));
        edtLog.setRows(5);
        jScrollPane3.setViewportView(edtLog);

        javax.swing.GroupLayout pnlLogLayout = new javax.swing.GroupLayout(pnlLog);
        pnlLog.setLayout(pnlLogLayout);
        pnlLogLayout.setHorizontalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLogLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnlLogLayout.setVerticalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        lblDescricaoFuncional.setText("Descrição Funcional Script");

        txaDescricaoFuncional.setColumns(20);
        txaDescricaoFuncional.setRows(5);
        jScrollPane4.setViewportView(txaDescricaoFuncional);

        lblPrefixo.setText("Prefixo:");

        cmbPrefixo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPrefixoActionPerformed(evt);
            }
        });

        lblSincronismo.setText("Realizar Sincronismo?");

        cmbSincronismo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione", "SIM", "NÃO" }));

        lblMantis.setText("Nº Mantis");

        javax.swing.GroupLayout pnlPerfilInsideLayout = new javax.swing.GroupLayout(pnlPerfilInside);
        pnlPerfilInside.setLayout(pnlPerfilInsideLayout);
        pnlPerfilInsideLayout.setHorizontalGroup(
            pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPerfilInsideLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitulo)
                    .addComponent(lblDescricao)
                    .addGroup(pnlPerfilInsideLayout.createSequentialGroup()
                        .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPerfilInsideLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlPerfilInsideLayout.createSequentialGroup()
                                        .addComponent(pnlOfertas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(52, 52, 52)
                                        .addComponent(pnlPerfis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlPerfilInsideLayout.createSequentialGroup()
                                        .addGap(232, 232, 232)
                                        .addComponent(cmbSincronismo, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlPerfilInsideLayout.createSequentialGroup()
                                        .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblSincronismo)
                                            .addGroup(pnlPerfilInsideLayout.createSequentialGroup()
                                                .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtOperatorID, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblOperatorID))
                                                .addGap(27, 27, 27)
                                                .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtDlServiceCode, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblDlServiceCode))
                                                .addGap(18, 18, 18)
                                                .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblDlUpdateStamp)
                                                    .addComponent(txtDlUpdateStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(9, 9, 9)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblMantis)
                                            .addComponent(txtMantis, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(lblPrefixo)
                            .addComponent(cmbPrefixo, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDescricaoFuncional)
                            .addComponent(pnlLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        pnlPerfilInsideLayout.setVerticalGroup(
            pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPerfilInsideLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescricao)
                    .addComponent(lblDescricaoFuncional))
                .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPerfilInsideLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPrefixo)
                            .addComponent(lblSincronismo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbPrefixo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbSincronismo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOperatorID)
                            .addComponent(lblDlServiceCode)
                            .addComponent(lblDlUpdateStamp)
                            .addComponent(lblMantis))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDlUpdateStamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDlServiceCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOperatorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMantis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPerfilInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pnlPerfis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlOfertas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPerfilInsideLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnlLog, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout pnlPerfilLayout = new javax.swing.GroupLayout(pnlPerfil);
        pnlPerfil.setLayout(pnlPerfilLayout);
        pnlPerfilLayout.setHorizontalGroup(
            pnlPerfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1354, Short.MAX_VALUE)
            .addComponent(pnlPerfilInside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlPerfilLayout.setVerticalGroup(
            pnlPerfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPerfilLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPerfilInside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlPerfil, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompileActionPerformed
        this.edtLog.setText("");
        if(this.validaCampos()) {
            try {
                Fields fields = this.getFields();
                List<String> perfis = FieldsUtil.getEdtTextByLine(this.edtPerfil.getText());
                List<String> ofertas = FieldsUtil.getEdtTextByLine(this.edtCodigo.getText());
                
                //JFile configuration
                JFileChooser  fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Selecione o diretório para salvar os arquivos");
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                fileChooser.setCurrentDirectory(new File (System.getProperty("user.home")+ System.getProperty("file.separator")+ "Desktop"));
                fileChooser.setAcceptAllFileFilterUsed(false);
                
                if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                    try {
                        edtLog.append("Iniciando...\n");
                        edtLog.append("\n");
                        edtLog.append("===================================\n");
                        edtLog.append("Testando conexão com o banco de dados...\n");
                        edtLog.append("===================================\n");
                        Connection con = null;
                        con = ConexaoOracle.getInstance().getConnection();
                        if(con != null){
                            this.PrintLog("Conectado com Sucesso!");
                            con.close();
                            con = null;
                            this.PrintLog("===================================");
                            this.PrintLog("\n");
                            this.PrintLog("===================================");
                            this.PrintLog("Verificando ofertas...");
                            this.PrintLog("===================================");
                            
                            List<Offers> offers = Verifyer.verifyOfferExists(ofertas);
                            for (Offers oferta : offers) {
                                this.PrintLog(oferta.getSocCD() + " - " + oferta.getSocName() + " - " + oferta.getStatusOffer());
                            }
                            this.PrintLog("\n");
                            this.PrintLog("===================================");
                            this.PrintLog("Verificando Perfis:");
                            this.PrintLog("===================================");
                            List<PerfilModel> perfil = Verifyer.verifyPerfilExists(perfis);
                            for (PerfilModel perfilObj : perfil) {
                                this.PrintLog(perfilObj.getPerfil() + " - " + perfilObj.getStatusPerfil());
                            }
                            this.PrintLog("\n");
                            
                            Path pathOS = Paths.get(fileChooser.getSelectedFile()+"\\"+fields.getDlServiceCode()+fields.getDlUpdateStamp());
                            
                            /** Directorys and  files Creation begin **
                             * 
                             * /** Creates the OS Directory **/
                            this.PrintLog("Criando diretório: "+pathOS.toString());
                            if(ArquivosUtil.createDir(pathOS.toString())){
                                this.PrintLog("Diretório criado com sucesso!");
                            }else{
                                this.PrintLog("Erro ao criar diretório "+pathOS.toString());
                            }

                            /** Creates the INSERTS Directory **/
                            this.PrintLog("Criando SubDiretório: " + pathOS.toString()+"\\SCRIPTS");
                            if(ArquivosUtil.createDir(pathOS.toString()+"\\SCRIPTS")){
                                this.PrintLog("SubDiretório criado com sucesso!");
                            }else{
                                this.PrintLog("Erro ao criar SubDiretório "+pathOS.toString()+"\\SCRIPTS");
                            }

                            /** Creates the ROLLBACK Directory **/
                            this.PrintLog("Criando SubDiretório: " + pathOS.toString()+"\\ROLLBACK");
                            if(ArquivosUtil.createDir(pathOS.toString()+"\\ROLLBACK")){
                                this.PrintLog("SubDiretório criado com sucesso!");
                            }else{
                                this.PrintLog("Erro ao criar SubDiretório "+pathOS.toString()+"\\ROLLBACK");
                            }

                            /** Creates the VALIDATION Directory **/
                            this.PrintLog("Criando SubDiretório: " + pathOS.toString()+"\\VALIDATION");
                            if(ArquivosUtil.createDir(pathOS.toString()+"\\VALIDATION")){
                                this.PrintLog("SubDiretório criado com sucesso!");
                            }else{
                                this.PrintLog("Erro ao criar SubDiretório "+pathOS.toString()+"\\VALIDATION");
                            }

                            /** Creates the LOG Directory **/
                            this.PrintLog("Criando SubDiretório: " + pathOS.toString()+"\\LOG");
                            if(ArquivosUtil.createDir(pathOS.toString()+"\\LOG")){
                                this.PrintLog("SubDiretório criado com sucesso!");
                            }else{
                                this.PrintLog("Erro ao criar SubDiretório "+pathOS.toString()+"\\LOG");
                            }

                            this.PrintLog("===================================");
                            this.PrintLog("Gerar Script Inserts...");
                            this.PrintLog("===================================");

                            String contentInsert = PerfilModel.generateInsertsPerfis(offers, perfil, fields);
                            this.PrintLog(contentInsert);

                            this.PrintLog("===================================");
                            this.PrintLog("Gerar Scripts de Rolback...");
                            this.PrintLog("===================================");
                            String contentDelete =  PerfilModel.generateRollbackPerfis(offers, perfil, fields);
                            this.PrintLog(contentDelete);

                            this.PrintLog("===================================");
                            this.PrintLog("Gerando Query de Validação...");
                            this.PrintLog("===================================");
                            String contentSelect =  PerfilModel.generateSelectPerfil(offers, perfil, fields);
                            this.PrintLog(contentSelect);
                            
                            this.PrintLog("===================================");
                            this.PrintLog("Gerando Query de Validação Rollback...");
                            this.PrintLog("===================================");
                            String contentSelectRollback =  PerfilModel.generateSelectPerfilRollback(offers, perfil, fields);
                            this.PrintLog(contentSelectRollback);

                            if (ArquivosUtil.createFile(pathOS.toString() + "\\SCRIPTS\\" +fields.getPrefixo()+"_"+(fields.getMantis() != null ? fields.getMantis()+"_":"")+"OS_"+ fields.getOsNumber()+(fields.getSincronismo().equals("SIM")?"_SINC":"" ) +".sql", contentInsert)
                                && ArquivosUtil.createFile(pathOS.toString() + "\\ROLLBACK\\" +fields.getPrefixo()+"_"+(fields.getMantis() != null ? fields.getMantis()+"_":"")+"OS_"+ fields.getOsNumber()+(fields.getSincronismo().equals("SIM")?"_SINC":"" ) + "_ROLLBACK.sql", contentDelete)
                                && ArquivosUtil.createFile(pathOS.toString() + "\\VALIDATION\\" +fields.getPrefixo()+"_"+(fields.getMantis() != null ? fields.getMantis()+"_":"")+"OS_"+ fields.getOsNumber()+(fields.getSincronismo().equals("SIM")?"_SINC":"" ) + "_VALIDATION.sql", contentSelect)
                                && ArquivosUtil.createFile(pathOS.toString() + "\\VALIDATION\\" +fields.getPrefixo()+"_"+(fields.getMantis() != null ? fields.getMantis()+"_":"")+"OS_"+ fields.getOsNumber()+(fields.getSincronismo().equals("SIM")?"_SINC":"" ) + "_VALIDATION_ROLLBACK.sql", contentSelectRollback)) {
                                
                                this.PrintLog("\n");
                                this.PrintLog("***************************************************************************************************************************");
                                this.PrintLog("***************************************************************************************************************************");
                                this.PrintLog("***                                                                       Processo Finalizado com sucesso!                                                           ***");
                                this.PrintLog("***************************************************************************************************************************");
                                this.PrintLog("***************************************************************************************************************************");
                                ArquivosUtil.createFile(pathOS.toString() + "\\LOG\\" +fields.getPrefixo()+"_"+(fields.getMantis() != null ? fields.getMantis()+"_":"")+"OS_"+ fields.getOsNumber()+(fields.getSincronismo().equals("SIM")?"_SINC":"" ) + "_LOG.txt", this.edtLog.getText());
                            }
                            
                        }else {
                            
                            this.PrintLog("===================================");
                            this.PrintLog("Erro ao conectar ao banco de dados!");
                            this.PrintLog("===================================");
                        }
                        
                    } catch (InterruptedException | SQLException | IOException  ex) {
                        try {
                            this.PrintLog(ex.getMessage().toString());
                        } catch (InterruptedException ex1) {
                            Logger.getLogger(PerfilView.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                        Logger.getLogger(PerfilView.class.getName()).log(Level.SEVERE, null, ex);
                        
                    }
                    
                } else {
                    System.out.println("No Selection ");
                }
            } catch (SQLException ex) {
                Logger.getLogger(PerfilView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnCompileActionPerformed

    private void cmbPrefixoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPrefixoActionPerformed
        // TODO add your handling code here:
        if(this.cmbPrefixo.getSelectedItem().toString().contains("MANTIS")){
            this.lblMantis.setVisible(true);
            this.txtMantis.setVisible(true);
        }else{
            this.lblMantis.setVisible(false);
            this.txtMantis.setVisible(false);

        }
    }//GEN-LAST:event_cmbPrefixoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCompile;
    private javax.swing.JComboBox cmbPrefixo;
    private javax.swing.JComboBox cmbSincronismo;
    private javax.swing.JEditorPane edtCodigo;
    private javax.swing.JTextArea edtLog;
    private javax.swing.JEditorPane edtPerfil;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblDescricaoFuncional;
    private javax.swing.JLabel lblDlServiceCode;
    private javax.swing.JLabel lblDlUpdateStamp;
    private javax.swing.JLabel lblMantis;
    private javax.swing.JLabel lblOperatorID;
    private javax.swing.JLabel lblPrefixo;
    private javax.swing.JLabel lblSincronismo;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlLog;
    private javax.swing.JPanel pnlOfertas;
    private javax.swing.JPanel pnlPerfil;
    private javax.swing.JPanel pnlPerfilInside;
    private javax.swing.JPanel pnlPerfis;
    private javax.swing.JTextArea txaDescricaoFuncional;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtDlServiceCode;
    private javax.swing.JTextField txtDlUpdateStamp;
    private javax.swing.JTextField txtMantis;
    private javax.swing.JTextField txtOperatorID;
    // End of variables declaration//GEN-END:variables

    /**
    * Valida os campos necessários
    * para a alteração da senha
    * @return 
    */
    private boolean validaCampos() {
    

        if (this.edtPerfil.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Oferta(s) são obrigatórias", "Atenção!", 2);
            return false;
        } else if (this.edtPerfil.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Insira ao menos um PERFIL!", "Atenção!", 2);
            return false;
        } else if (this.txtDescricao.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Descrição é Obrigatória", "Atenção!", 2);
            return false;
        } else if (this.txaDescricaoFuncional.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Descrição Funcional é Obrigatória", "Atenção!", 2);
            return false;
        } else if (this.txtDlServiceCode.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DL SERVICE CODE é Obrigatório", "Atenção!", 2);
            return false;
        } else if (this.txtOperatorID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "OPERATOR ID é Obrigatório", "Atenção!", 2);
            return false;
        }else if (this.txtDlUpdateStamp.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DL UPDATE STAMP é Obrigatório", "Atenção!", 2);
            return false;
        }else if (this.cmbPrefixo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Selecione o Prefixo!", "Atenção!", 2);
            return false;
        }else if (this.cmbSincronismo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Selecione a Necessidade Sincronismo!", "Atenção!", 2);
            return false;
        }else if(this.txtMantis.isVisible()){
            if(this.txtMantis.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Nº Mantis é Obrigatório!", "Atenção!", 2);
                return false;
            }
        }
        
        return true;
    }
    
    
    /**
     * Recupera campos do formulário
     * @return objeto do tipo <code>Fields</code> 
     * @throws SQLException 
     */
    private Fields getFields() throws SQLException{
        
        Fields fields = new Fields();
        
        fields.setDlServiceCode(this.txtDlServiceCode.getText());
        fields.setDescFuncional(this.txaDescricaoFuncional.getText());
        fields.setDlUpdateStamp(this.txtDlUpdateStamp.getText());
        fields.setOperatorID(this.txtOperatorID.getText());
        fields.setOsDesc(this.txtDescricao.getText());
        fields.setUserName(Usuario.getFullName(user).toString());
        fields.setPrefixo(this.cmbPrefixo.getSelectedItem().toString());
        fields.setSincronismo(this.cmbSincronismo.getSelectedItem().toString());
        if(txtMantis.isVisible())
            fields.setMantis(txtMantis.getText());
        
        return fields;
        
    }
    
   public void populaComboPrefixo(){
        
        List<String> listPrefixos = Prefixo.getPrefixos();
        for(String prefixo: listPrefixos ){   
             cmbPrefixo.addItem(prefixo);   
        }
    }
    
    public void inicializa(){
        this.populaComboPrefixo();
        this.lblMantis.setVisible(false);
        this.txtMantis.setVisible(false);
    }
    
    public void PrintLog(String textLog) throws InterruptedException{
        
                    edtLog.append(textLog + "\n");
                    edtLog.update(edtLog.getGraphics());
        
   }
}

