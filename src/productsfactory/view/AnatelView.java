/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StateView.java
 *
 * Created on 18/05/2012, 20:17:34
 */
package productsfactory.view;


import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import productsfactory.model.AnatelModel;
import productsfactory.model.Fields;
import productsfactory.model.Offers;
import productsfactory.model.StateModel;
import productsfactory.model.Usuario;
import productsfactory.model.Verifyer;
import productsfactory.useful.ArquivosUtil;
import productsfactory.useful.ConexaoOracle;
import productsfactory.useful.FieldsUtil;

/**
 *
 * @author Julio
 */
public class AnatelView extends javax.swing.JFrame {
    
    private static AnatelView jFrame = null;
    private static Usuario user = null;
    
    /** Creates new form Menu */
    public AnatelView() {
        
    }
    
    
     public AnatelView(java.awt.Frame janela,Usuario usuario) {
       initComponents();
       user = usuario;
        
       this.txtDescricao.setText("BSR -Novo Portf√≥lio BL e Pacotes Adicionais");
       this.txaDescricaoFuncional.setText("Script que insere novos estados na tabela ANATEL");
       this.txtDlServiceCode.setText("10795");
       this.txtDlUpdateStamp.setText("4");
       this.txtOperatorID.setText("93277340");
       
        
       this.chRR.setSelected(true);
       this.chMA.setSelected(true);
       this.chPA.setSelected(true);
       this.chRJ.setSelected(true);
       this.chCE.setSelected(true);
       
       this.edtCodigo.setText("380412371\n" +
                                "380600681\n" +
                                "363001387\n" +
                                "380585340\n" +
                                "380419853");
       
       this.edtCodigoAnatel.setText("013\n"
                                + "154\n"
                                + "149\n"
                                + "222\n"
                                + "363\n");
               
       
        
    }
    
    public static AnatelView getFrameState(java.awt.Frame janela){
          if (jFrame == null) {
            jFrame = new AnatelView(janela, user);
        }
        return jFrame;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlAnatel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnCompile = new javax.swing.JButton();
        pnlAnatelInside = new javax.swing.JPanel();
        pnlEstados = new javax.swing.JPanel();
        chCheckAll = new javax.swing.JCheckBox();
        chAC = new javax.swing.JCheckBox();
        chAL = new javax.swing.JCheckBox();
        chAM = new javax.swing.JCheckBox();
        chAP = new javax.swing.JCheckBox();
        chBA = new javax.swing.JCheckBox();
        chCE = new javax.swing.JCheckBox();
        chDF = new javax.swing.JCheckBox();
        chES = new javax.swing.JCheckBox();
        chGO = new javax.swing.JCheckBox();
        chMA = new javax.swing.JCheckBox();
        chMS = new javax.swing.JCheckBox();
        chMG = new javax.swing.JCheckBox();
        chMT = new javax.swing.JCheckBox();
        chPA = new javax.swing.JCheckBox();
        chPB = new javax.swing.JCheckBox();
        chPE = new javax.swing.JCheckBox();
        chPI = new javax.swing.JCheckBox();
        chPR = new javax.swing.JCheckBox();
        chRJ = new javax.swing.JCheckBox();
        chRN = new javax.swing.JCheckBox();
        chRO = new javax.swing.JCheckBox();
        chRR = new javax.swing.JCheckBox();
        chRS = new javax.swing.JCheckBox();
        chSC = new javax.swing.JCheckBox();
        chSE = new javax.swing.JCheckBox();
        chSP = new javax.swing.JCheckBox();
        chTO = new javax.swing.JCheckBox();
        txtDescricao = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtDlServiceCode = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtOperatorID = new interfacegrafica.dpa.textfield.TextFieldDPA();
        txtDlUpdateStamp = new interfacegrafica.dpa.textfield.TextFieldDPA();
        lblDescricao = new interfacegrafica.dpa.labels.LabelDPA();
        lblOperatorID = new interfacegrafica.dpa.labels.LabelDPA();
        lblDlServiceCode = new interfacegrafica.dpa.labels.LabelDPA();
        lblDlUpdateStamp = new interfacegrafica.dpa.labels.LabelDPA();
        pnlOfertas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        edtCodigo = new javax.swing.JEditorPane();
        lblTitulo = new interfacegrafica.dpa.labels.LabelTituloDPA();
        pnlLog = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        edtLog = new javax.swing.JTextArea();
        pnlCodigoAnatel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        edtCodigoAnatel = new javax.swing.JEditorPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        txaDescricaoFuncional = new interfacegrafica.dpa.textarea.TextAreaDPA();
        lblDescricaoFuncional = new interfacegrafica.dpa.labels.LabelDPA();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Anatel");

        pnlAnatel.setBackground(new java.awt.Color(255, 255, 255));

        jToolBar1.setRollover(true);

        btnCompile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/productsfactory/images/execute.png"))); // NOI18N
        btnCompile.setBorderPainted(false);
        btnCompile.setFocusable(false);
        btnCompile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCompile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompileActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCompile);

        pnlAnatelInside.setBackground(new java.awt.Color(255, 255, 255));
        pnlAnatelInside.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 5, true)));

        pnlEstados.setBackground(new java.awt.Color(255, 255, 255));
        pnlEstados.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estados", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        chCheckAll.setText("Check/Unchek All");
        chCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chCheckAllActionPerformed(evt);
            }
        });

        chAC.setText("AC");
        chAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chACActionPerformed(evt);
            }
        });

        chAL.setText("AL");

        chAM.setText("AM");

        chAP.setText("AP");

        chBA.setText("BA");
        chBA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chBAActionPerformed(evt);
            }
        });

        chCE.setText("CE");

        chDF.setText("DF");

        chES.setText("ES");
        chES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chESActionPerformed(evt);
            }
        });

        chGO.setText("GO");

        chMA.setText("MA");

        chMS.setText("MS");

        chMG.setText("MG");

        chMT.setText("MT");

        chPA.setText("PA");

        chPB.setText("PB");

        chPE.setText("PE");

        chPI.setText("PI");

        chPR.setText("PR");

        chRJ.setText("RJ");

        chRN.setText("RN");

        chRO.setText("RO");

        chRR.setText("RR");

        chRS.setText("RS");

        chSC.setText("SC");

        chSE.setText("SE");

        chSP.setText("SP");

        chTO.setText("TO");

        javax.swing.GroupLayout pnlEstadosLayout = new javax.swing.GroupLayout(pnlEstados);
        pnlEstados.setLayout(pnlEstadosLayout);
        pnlEstadosLayout.setHorizontalGroup(
            pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstadosLayout.createSequentialGroup()
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlEstadosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chCheckAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlEstadosLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEstadosLayout.createSequentialGroup()
                                    .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(chAM)
                                        .addComponent(chAP)
                                        .addComponent(chAL)
                                        .addComponent(chBA))
                                    .addGap(30, 30, 30))
                                .addGroup(pnlEstadosLayout.createSequentialGroup()
                                    .addComponent(chAC)
                                    .addGap(32, 32, 32)))
                            .addGroup(pnlEstadosLayout.createSequentialGroup()
                                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chMA)
                                    .addComponent(chDF)
                                    .addComponent(chCE)
                                    .addComponent(chES)
                                    .addComponent(chMS)
                                    .addComponent(chMG)
                                    .addComponent(chMT)
                                    .addComponent(chPA)
                                    .addComponent(chGO))
                                .addGap(30, 30, 30)))
                        .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chRN)
                            .addComponent(chPB)
                            .addComponent(chRJ)
                            .addComponent(chPE)
                            .addComponent(chPR)
                            .addComponent(chPI)
                            .addComponent(chRO)
                            .addComponent(chRR)
                            .addComponent(chRS)
                            .addComponent(chSC)
                            .addComponent(chSE)
                            .addComponent(chSP)
                            .addComponent(chTO))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        pnlEstadosLayout.setVerticalGroup(
            pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstadosLayout.createSequentialGroup()
                .addComponent(chCheckAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chAC)
                    .addComponent(chPB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chAL)
                    .addComponent(chPE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chAM)
                    .addComponent(chPI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chAP)
                    .addComponent(chPR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chBA)
                    .addComponent(chRJ))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chCE)
                    .addComponent(chRN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chDF)
                    .addComponent(chRO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chES)
                    .addComponent(chRR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chGO)
                    .addComponent(chRS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chMA)
                    .addComponent(chSC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chMG)
                    .addComponent(chSE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chMS)
                    .addComponent(chSP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chMT)
                    .addComponent(chTO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chPA)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblDescricao.setText("Descri√ß√£o BSR (Retirada do IW)");

        lblOperatorID.setText("Operator ID");

        lblDlServiceCode.setText("DL SERVICE CODE");

        lblDlUpdateStamp.setText("DL UPDATE STAMP");

        pnlOfertas.setBackground(new java.awt.Color(255, 255, 255));
        pnlOfertas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ofertas (SOC_CD)", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jScrollPane1.setHorizontalScrollBar(null);

        edtCodigo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(204, 204, 204), null, new java.awt.Color(153, 204, 255)));
        edtCodigo.setAutoscrolls(false);
        jScrollPane1.setViewportView(edtCodigo);

        javax.swing.GroupLayout pnlOfertasLayout = new javax.swing.GroupLayout(pnlOfertas);
        pnlOfertas.setLayout(pnlOfertasLayout);
        pnlOfertasLayout.setHorizontalGroup(
            pnlOfertasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOfertasLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        pnlOfertasLayout.setVerticalGroup(
            pnlOfertasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOfertasLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblTitulo.setText("GENERATE [BL7_OFFER_ANATEL INSERT]");

        pnlLog.setBackground(new java.awt.Color(255, 255, 255));
        pnlLog.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log Panel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        edtLog.setBackground(new java.awt.Color(0, 0, 0));
        edtLog.setColumns(20);
        edtLog.setForeground(new java.awt.Color(0, 153, 0));
        edtLog.setRows(5);
        jScrollPane3.setViewportView(edtLog);

        javax.swing.GroupLayout pnlLogLayout = new javax.swing.GroupLayout(pnlLog);
        pnlLog.setLayout(pnlLogLayout);
        pnlLogLayout.setHorizontalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLogLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnlLogLayout.setVerticalGroup(
            pnlLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlCodigoAnatel.setBackground(new java.awt.Color(255, 255, 255));
        pnlCodigoAnatel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "C√≥digo Anatel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jScrollPane2.setHorizontalScrollBar(null);

        edtCodigoAnatel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(204, 204, 204), null, new java.awt.Color(153, 204, 255)));
        edtCodigoAnatel.setAutoscrolls(false);
        jScrollPane2.setViewportView(edtCodigoAnatel);

        javax.swing.GroupLayout pnlCodigoAnatelLayout = new javax.swing.GroupLayout(pnlCodigoAnatel);
        pnlCodigoAnatel.setLayout(pnlCodigoAnatelLayout);
        pnlCodigoAnatelLayout.setHorizontalGroup(
            pnlCodigoAnatelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCodigoAnatelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        pnlCodigoAnatelLayout.setVerticalGroup(
            pnlCodigoAnatelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCodigoAnatelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addContainerGap())
        );

        txaDescricaoFuncional.setColumns(20);
        txaDescricaoFuncional.setRows(5);
        jScrollPane4.setViewportView(txaDescricaoFuncional);

        lblDescricaoFuncional.setText("Descri√ß√£o Funcional Script");

        javax.swing.GroupLayout pnlAnatelInsideLayout = new javax.swing.GroupLayout(pnlAnatelInside);
        pnlAnatelInside.setLayout(pnlAnatelInsideLayout);
        pnlAnatelInsideLayout.setHorizontalGroup(
            pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitulo)
                    .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                        .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                                        .addComponent(pnlOfertas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(pnlCodigoAnatel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22)
                                        .addComponent(pnlEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                                        .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtOperatorID, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblOperatorID))
                                        .addGap(27, 27, 27)
                                        .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtDlServiceCode, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblDlServiceCode))
                                        .addGap(27, 27, 27)
                                        .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDlUpdateStamp)
                                            .addComponent(txtDlUpdateStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(lblDescricao)
                            .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDescricaoFuncional)
                            .addComponent(pnlLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAnatelInsideLayout.setVerticalGroup(
            pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                        .addComponent(lblDescricaoFuncional)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnlLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                        .addComponent(lblTitulo)
                        .addGap(30, 30, 30)
                        .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                                .addComponent(lblDescricao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblOperatorID)
                                    .addComponent(lblDlServiceCode)
                                    .addComponent(lblDlUpdateStamp))
                                .addGap(7, 7, 7)
                                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDlUpdateStamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDlServiceCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtOperatorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlAnatelInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnlAnatelInsideLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pnlOfertas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlAnatelInsideLayout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(pnlEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(pnlCodigoAnatel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlAnatelLayout = new javax.swing.GroupLayout(pnlAnatel);
        pnlAnatel.setLayout(pnlAnatelLayout);
        pnlAnatelLayout.setHorizontalGroup(
            pnlAnatelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1348, Short.MAX_VALUE)
            .addGroup(pnlAnatelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlAnatelInside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAnatelLayout.setVerticalGroup(
            pnlAnatelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnatelLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(667, Short.MAX_VALUE))
            .addGroup(pnlAnatelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlAnatelLayout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addComponent(pnlAnatelInside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        getContentPane().add(pnlAnatel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompileActionPerformed
  
    this.edtLog.setText("");
    if (this.validaCampos()) {
        try {
            Fields fields = this.getFields();
            List<StateModel> states = this.retornaStates();
            List<String> ofertas = FieldsUtil.getEdtTextByLine(this.edtCodigo.getText());
            List<AnatelModel> anatels = this.retortaAnatelCode();
            
            /**
             * JFile configuration *
             */
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Selecione o diret√≥rio para salvar os arquivos");
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fileChooser.setCurrentDirectory(new File (System.getProperty("user.home")+ System.getProperty("file.separator")+ "Desktop"));
            fileChooser.setAcceptAllFileFilterUsed(false);
            
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                try {
                    edtLog.append("Iniciando...\n");
                    edtLog.append("\n");
                    edtLog.append("===================================\n");
                    edtLog.append("Testando conex√£o com o banco de dados...\n");
                    edtLog.append("===================================\n");
                    Connection con = null;
                    con = ConexaoOracle.getInstance().getConnection();
                    if (con != null) {
                        this.PrintLog("Conectado com Sucesso!");
                        con.close();
                        con = null;
                        this.PrintLog("===================================");
                        this.PrintLog("\n");
                        this.PrintLog("===================================");
                        this.PrintLog("Verificando ofertas...");
                        this.PrintLog("===================================");
                        
                        List<Offers> offers = Verifyer.verifyOfferExists(ofertas);
                        for (Offers oferta : offers) {
                            this.PrintLog(oferta.getSocCD() + " - " + oferta.getSocName() + " - " + oferta.getStatusOffer());
                        }
                        this.PrintLog("\n");
                        this.PrintLog("===================================");
                        this.PrintLog("Estados Selecionados:");
                        this.PrintLog("===================================");
                        List<StateModel> stateModel = this.retornaStates();
                        for(StateModel state : stateModel){
                            this.PrintLog(state.getState());
                        }
                        this.PrintLog("\n");
                        
                        Path pathOS = Paths.get(fileChooser.getSelectedFile() + "\\" + fields.getDlServiceCode() + fields.getDlUpdateStamp());
                        
                        /**
                         * Directorys and files Creation begin **
                         *
                         * /** Creates the OS Directory *
                         */
                        this.PrintLog("Criando diret√≥rio: " + pathOS.toString());
                        if (ArquivosUtil.createDir(pathOS.toString())) {
                            this.PrintLog("Diret√≥rio criado com sucesso!");
                        } else {
                            this.PrintLog("Erro ao criar diret√≥rio " + pathOS.toString());
                        }
                        
                        /**
                         * Creates the INSERTS Directory *
                         */
                        this.PrintLog("Criando SubDiret√≥rio: " + pathOS.toString() + "\\INSERTS");
                        if (ArquivosUtil.createDir(pathOS.toString() + "\\INSERTS")) {
                            this.PrintLog("SubDiret√≥rio criado com sucesso!");
                        } else {
                            this.PrintLog("Erro ao criar SubDiret√≥rio " + pathOS.toString() + "\\INSERTS");
                        }
                        
                        /**
                         * Creates the ROLLBACK Directory *
                         */
                        this.PrintLog("Criando SubDiret√≥rio: " + pathOS.toString() + "\\ROLLBACK");
                        if (ArquivosUtil.createDir(pathOS.toString() + "\\ROLLBACK")) {
                            this.PrintLog("SubDiret√≥rio criado com sucesso!");
                        } else {
                            this.PrintLog("Erro ao criar SubDiret√≥rio " + pathOS.toString() + "\\ROLLBACK");
                        }
                        
                        /**
                         * Creates the VALIDATION Directory *
                         */
                        this.PrintLog("Criando SubDiret√≥rio: " + pathOS.toString() + "\\VALIDATION");
                        if (ArquivosUtil.createDir(pathOS.toString() + "\\VALIDATION")) {
                            this.PrintLog("SubDiret√≥rio criado com sucesso!");
                        } else {
                            this.PrintLog("Erro ao criar SubDiret√≥rio " + pathOS.toString() + "\\VALIDATION");
                        }
                        
                        /**
                         * Creates the LOG Directory *
                         */
                        this.PrintLog("Criando SubDiret√≥rio: " + pathOS.toString() + "\\LOG");
                        if (ArquivosUtil.createDir(pathOS.toString() + "\\LOG")) {
                            this.PrintLog("SubDiret√≥rio criado com sucesso!");
                        } else {
                            this.PrintLog("Erro ao criar SubDiret√≥rio " + pathOS.toString() + "\\LOG");
                        }
                        
                        this.PrintLog("===================================");
                        this.PrintLog("Gerar Script Inserts...");
                        this.PrintLog("===================================");
                        
                        String contentInsert = AnatelModel.generateInsertsAnatel(offers, anatels, states, fields);
                        this.PrintLog(contentInsert);
                        
                        this.PrintLog("===================================");
                        this.PrintLog("Gerar Scripts de Rolback...");
                        this.PrintLog("===================================");
                        String contentDelete = AnatelModel.generateRollbackAnatel(offers, anatels, states, fields);
                        this.PrintLog(contentDelete);
                        
                        this.PrintLog("===================================");
                        this.PrintLog("Gerando Query de Valida√ß√£o...");
                        this.PrintLog("===================================");
                        String contentSelect = AnatelModel.generateSelectAnatel(offers, anatels, states, fields);
                        this.PrintLog(contentSelect);
                        
                        this.PrintLog("===================================");
                        this.PrintLog("Gerando Query de Valida√ß√£o Rollback...");
                        this.PrintLog("===================================");
                        String contentSelectRollback = AnatelModel.generateSelectAnatelRollback(offers,anatels, states, fields);
                        this.PrintLog(contentSelectRollback);
                        
                        if (ArquivosUtil.createFile(pathOS.toString() + "\\INSERTS\\" + fields.getOsNumber() + "_INSERTS.sql", contentInsert)
                                && ArquivosUtil.createFile(pathOS.toString() + "\\ROLLBACK\\" + fields.getOsNumber() + "_ROLLBACK.sql", contentDelete)
                                && ArquivosUtil.createFile(pathOS.toString() + "\\VALIDATION\\" + fields.getOsNumber() + "_VALIDATION.sql", contentSelect)
                                && ArquivosUtil.createFile(pathOS.toString() + "\\VALIDATION\\" + fields.getOsNumber() + "_VALIDATION_ROLLBACK.sql", contentSelectRollback)) {
                            
                            this.PrintLog("\n");
                            this.PrintLog("***************************************************************************************************************************");
                            this.PrintLog("***************************************************************************************************************************");
                            this.PrintLog("***                                                                       Processo Finalizado com sucesso!                                                           ***");
                            this.PrintLog("***************************************************************************************************************************");
                            this.PrintLog("***************************************************************************************************************************");
                            ArquivosUtil.createFile(pathOS.toString() + "\\LOG\\" + fields.getOsNumber() + "_LOG.txt", this.edtLog.getText());
                        }
                        
                    } else {

                        this.PrintLog("===================================");
                        this.PrintLog("Erro ao conectar ao banco de dados!");
                        this.PrintLog("===================================");
                    }
                    
                } catch (InterruptedException | SQLException | IOException ex) {
                    Logger.getLogger(AnatelView.class.getName()).log(Level.SEVERE, null, ex);
                    
                }
                
            } else {
                System.out.println("No Selection ");
            }
        } catch (SQLException ex) {
            Logger.getLogger(AnatelView.class.getName()).log(Level.SEVERE, null, ex);
        }
   }
          
}//GEN-LAST:event_btnCompileActionPerformed

    private void chCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chCheckAllActionPerformed
        // TODO add your handling code here:
        if (this.chCheckAll.isSelected() == false) {
            chAC.setSelected(false);
            chAL.setSelected(false);
            chAM.setSelected(false);
            chAP.setSelected(false);
            chBA.setSelected(false);
            chCE.setSelected(false);
            chDF.setSelected(false);
            chES.setSelected(false);
            chGO.setSelected(false);
            chMA.setSelected(false);
            chMS.setSelected(false);
            chMG.setSelected(false);
            chMT.setSelected(false);
            chPA.setSelected(false);
            chPB.setSelected(false);
            chPE.setSelected(false);
            chPI.setSelected(false);
            chPR.setSelected(false);
            chRJ.setSelected(false);
            chRN.setSelected(false);
            chRO.setSelected(false);
            chRR.setSelected(false);
            chRS.setSelected(false);
            chSC.setSelected(false);
            chSE.setSelected(false);
            chSP.setSelected(false);
            chTO.setSelected(false);



        } else if (this.chCheckAll.isSelected() == true) {

            chAC.setSelected(true);
            chAL.setSelected(true);
            chAM.setSelected(true);
            chAP.setSelected(true);
            chBA.setSelected(true);
            chCE.setSelected(true);
            chDF.setSelected(true);
            chES.setSelected(true);
            chGO.setSelected(true);
            chMA.setSelected(true);
            chMS.setSelected(true);
            chMG.setSelected(true);
            chMT.setSelected(true);
            chPA.setSelected(true);
            chPB.setSelected(true);
            chPE.setSelected(true);
            chPI.setSelected(true);
            chPR.setSelected(true);
            chRJ.setSelected(true);
            chRN.setSelected(true);
            chRO.setSelected(true);
            chRR.setSelected(true);
            chRS.setSelected(true);
            chSC.setSelected(true);
            chSE.setSelected(true);
            chSP.setSelected(true);
            chTO.setSelected(true);
        }
    }//GEN-LAST:event_chCheckAllActionPerformed

    private void chACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chACActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chACActionPerformed

    private void chBAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chBAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chBAActionPerformed

    private void chESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chESActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chESActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCompile;
    private javax.swing.JCheckBox chAC;
    private javax.swing.JCheckBox chAL;
    private javax.swing.JCheckBox chAM;
    private javax.swing.JCheckBox chAP;
    private javax.swing.JCheckBox chBA;
    private javax.swing.JCheckBox chCE;
    private javax.swing.JCheckBox chCheckAll;
    private javax.swing.JCheckBox chDF;
    private javax.swing.JCheckBox chES;
    private javax.swing.JCheckBox chGO;
    private javax.swing.JCheckBox chMA;
    private javax.swing.JCheckBox chMG;
    private javax.swing.JCheckBox chMS;
    private javax.swing.JCheckBox chMT;
    private javax.swing.JCheckBox chPA;
    private javax.swing.JCheckBox chPB;
    private javax.swing.JCheckBox chPE;
    private javax.swing.JCheckBox chPI;
    private javax.swing.JCheckBox chPR;
    private javax.swing.JCheckBox chRJ;
    private javax.swing.JCheckBox chRN;
    private javax.swing.JCheckBox chRO;
    private javax.swing.JCheckBox chRR;
    private javax.swing.JCheckBox chRS;
    private javax.swing.JCheckBox chSC;
    private javax.swing.JCheckBox chSE;
    private javax.swing.JCheckBox chSP;
    private javax.swing.JCheckBox chTO;
    private javax.swing.JEditorPane edtCodigo;
    private javax.swing.JEditorPane edtCodigoAnatel;
    private javax.swing.JTextArea edtLog;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblDescricaoFuncional;
    private javax.swing.JLabel lblDlServiceCode;
    private javax.swing.JLabel lblDlUpdateStamp;
    private javax.swing.JLabel lblOperatorID;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlAnatel;
    private javax.swing.JPanel pnlAnatelInside;
    private javax.swing.JPanel pnlCodigoAnatel;
    private javax.swing.JPanel pnlEstados;
    private javax.swing.JPanel pnlLog;
    private javax.swing.JPanel pnlOfertas;
    private javax.swing.JTextArea txaDescricaoFuncional;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtDlServiceCode;
    private javax.swing.JTextField txtDlUpdateStamp;
    private javax.swing.JTextField txtOperatorID;
    // End of variables declaration//GEN-END:variables

    /**
    * Valida os campos necess√°rios
    * para a altera√ß√£o da senha
    * @return 
    */
    private boolean validaCampos() {
    

        if (this.edtCodigo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Oferta(s) s√£o obrigat√≥rias", "Aten√ß√£o!", 2);
            return false;
        } else if (this.txtDescricao.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Descri√ß√£o √© Obrigat√≥ria", "Aten√ß√£o!", 2);
            return false;
        } else if (this.txtDlServiceCode.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DL SERVICE CODE √© Obrigat√≥rio", "Aten√ß√£o!", 2);
            return false;
        } else if (this.txtOperatorID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "OPERATOR ID √© Obrigat√≥rio", "Aten√ß√£o!", 2);
            return false;
        }else if (this.txtDlUpdateStamp.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DL UPDATE STAMP √© Obrigat√≥rio", "Aten√ß√£o!", 2);
            return false;
        }else if (this.txaDescricaoFuncional.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Descri√ß√£o Funcional √© Obrigat√≥ria", "Aten√ß√£o!", 2);
            return false;
        }else if (!this.validaCheckbox()) {
            JOptionPane.showMessageDialog(this, "Selecione ao menos um Estado!", "Aten√ß√£o!", 2);
            return false;
        }
        return true;
    }
    
    public List<AnatelModel> retortaAnatelCode(){
        
        List<String> linhas = new ArrayList<>();
        List<AnatelModel> listAnatelCodes = new ArrayList<>();
        
        String[] breakLine = null ;
       
        linhas.add(this.edtCodigoAnatel.getText());
        
        for(int i = 0;i < linhas.size(); i++){
           breakLine = linhas.get(i).split("\n");
            for (String brkLine : breakLine) {
                AnatelModel anatel = new AnatelModel();
                anatel.setCodigoAnatel(brkLine);
                listAnatelCodes.add(anatel);
            }
        }
        
        return listAnatelCodes;
    }
    
    public List<StateModel> retornaStates(){
        
        List<StateModel> listEstados = new ArrayList<>();
        
        JCheckBox[] vetChebox = new JCheckBox[27];
        
        vetChebox[0] = chAC;
        vetChebox[1] = chAL;
        vetChebox[2] = chAM;
        vetChebox[3] = chAP;
        vetChebox[4] = chBA;
        vetChebox[5] = chCE;
        vetChebox[6] = chDF;
        vetChebox[7] = chES;
        vetChebox[8] = chGO;
        vetChebox[9] = chMA;
        vetChebox[10] = chMS;
        vetChebox[11] = chMG;
        vetChebox[12] = chMT;
        vetChebox[13] = chPA;
        vetChebox[14] = chPB;
        vetChebox[15] = chPE;
        vetChebox[16] = chPI;
        vetChebox[17] = chPR;
        vetChebox[18] = chRJ;
        vetChebox[19] = chRN;
        vetChebox[20] = chRO;
        vetChebox[21] = chRR;
        vetChebox[22] = chRS;
        vetChebox[23] = chSC;
        vetChebox[24] = chSE;
        vetChebox[25] = chSP;
        vetChebox[26] = chTO;
        
        
        String[] vetStates = new String[27];
        
        vetStates[0] = "AC";
        vetStates[1] = "AL";
        vetStates[2] = "AM";
        vetStates[3] = "AP";
        vetStates[4] = "BA";
        vetStates[5] = "CE";
        vetStates[6] = "DF";
        vetStates[7] = "ES";
        vetStates[8] = "GO";
        vetStates[9] = "MA";
        vetStates[10] = "MG";
        vetStates[11] = "MS";
        vetStates[12] = "MT";
        vetStates[13] = "PA";
        vetStates[14] = "PB";
        vetStates[15] = "PE";
        vetStates[16] = "PI";
        vetStates[17] = "PR";
        vetStates[18] = "RJ";
        vetStates[19] = "RN";
        vetStates[20] = "RO";
        vetStates[21] = "RR";
        vetStates[22] = "RS";
        vetStates[23] = "SC";
        vetStates[24] = "SE";
        vetStates[25] = "SP";
        vetStates[26] = "TO";
        
        
        
        for(int i = 0; i < vetChebox.length;i++){
            if(vetChebox[i].isSelected()){
               StateModel state = new StateModel();
               state.setState(vetStates[i]);
               listEstados.add(state);
            }
               
                          
        }
        
        
        return listEstados;
    }
    
    /**
     * Recupera campos do formul√°rio
     * @return objeto do tipo <code>Fields</code> 
     * @throws SQLException 
     */
    private Fields getFields() throws SQLException{
        
        Fields fields = new Fields();
        
        fields.setDlServiceCode(this.txtDlServiceCode.getText());
        fields.setDescFuncional(this.txaDescricaoFuncional.getText());
        fields.setDlUpdateStamp(this.txtDlUpdateStamp.getText());
        fields.setOperatorID(this.txtOperatorID.getText());
        fields.setOsDesc(this.txtDescricao.getText());
        fields.setUserName(Usuario.getFullName(user).toString());
        
        return fields;
        
        
    }
   
    private boolean validaCheckbox(){
    
        JCheckBox[] vetChebox = new JCheckBox[27];
        
        vetChebox[0] = chAC;
        vetChebox[1] = chAL;
        vetChebox[2] = chAM;
        vetChebox[3] = chAP;
        vetChebox[4] = chBA;
        vetChebox[5] = chCE;
        vetChebox[6] = chDF;
        vetChebox[7] = chES;
        vetChebox[8] = chGO;
        vetChebox[9] = chMA;
        vetChebox[10] = chMS;
        vetChebox[11] = chMG;
        vetChebox[12] = chMT;
        vetChebox[13] = chPA;
        vetChebox[14] = chPB;
        vetChebox[15] = chPE;
        vetChebox[16] = chPI;
        vetChebox[17] = chPR;
        vetChebox[18] = chRJ;
        vetChebox[19] = chRN;
        vetChebox[20] = chRO;
        vetChebox[21] = chRR;
        vetChebox[22] = chRS;
        vetChebox[23] = chSC;
        vetChebox[24] = chSE;
        vetChebox[25] = chSP;
        vetChebox[26] = chTO;
        
        for (JCheckBox vetChebox1 : vetChebox) {
            if (vetChebox1.isSelected()) {
                return true;
            }
        }
        
      return false;   
        
    }
    
    
    public void PrintLog(String textLog) throws InterruptedException{
        
                    edtLog.append(textLog + "\n");
                    edtLog.update(edtLog.getGraphics());
        
   }
}

